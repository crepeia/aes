<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 19.2.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" [
	<!ENTITY ns_extend "http://ns.adobe.com/Extensibility/1.0/">
	<!ENTITY ns_ai "http://ns.adobe.com/AdobeIllustrator/10.0/">
	<!ENTITY ns_graphs "http://ns.adobe.com/Graphs/1.0/">
	<!ENTITY ns_vars "http://ns.adobe.com/Variables/1.0/">
	<!ENTITY ns_imrep "http://ns.adobe.com/ImageReplacement/1.0/">
	<!ENTITY ns_sfw "http://ns.adobe.com/SaveForWeb/1.0/">
	<!ENTITY ns_custom "http://ns.adobe.com/GenericCustomNamespace/1.0/">
	<!ENTITY ns_adobe_xpath "http://ns.adobe.com/XPath/1.0/">
]>
<svg version="1.1"
	 id="svg2" xmlns:x="&ns_extend;" xmlns:i="&ns_ai;" xmlns:graph="&ns_graphs;" inkscape:export-filename="/home/crepeia/aes/imgs/aes.png" inkscape:export-xdpi="300" inkscape:export-ydpi="300" inkscape:version="0.48.3.1 r9886" sodipodi:docname="logo-aes.svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:ns1="https://launchpad.net/jessyink" xmlns:osb="http://www.openswatchbook.org/uri/2009/osb" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"
	 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 744.1 1052.4"
	 style="enable-background:new 0 0 744.1 1052.4;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#336699;}
	.st1{fill:#F44800;fill-opacity:0;}
	.st2{fill:#3498DB;}
	.st3{fill:#2980B9;}
</style>
<switch>
	<foreignObject requiredExtensions="&ns_ai;" x="0" y="0" width="1" height="1">
		<i:pgfRef  xlink:href="#adobe_illustrator_pgf">
		</i:pgfRef>
	</foreignObject>
	<g i:extraneous="self">
		<g id="g5723-2" transform="matrix(3.2096728,0,0,3.1151679,-945.52686,-82.269422)">
			<path id="path5725-5" inkscape:connector-curvature="0" class="st0" d="M495.1,285.1c7.4,0,13.3,5.9,13.3,13.3v0.8
				c0,7.4-5.9,13.3-13.3,13.3c-7.4,0-13.3-5.9-13.3-13.3v-0.8C481.8,291.1,487.7,285.1,495.1,285.1z"/>
			<g id="g5727-4" transform="matrix(0.56513581,0,0,0.58228033,380.14626,270.57807)">
			</g>
		</g>
		<g id="g5723" transform="matrix(3.2096728,0,0,3.1151679,-945.52686,-82.269422)">
			<path id="path5725" inkscape:connector-curvature="0" class="st0" d="M498.5,325.6c7.4,0,13.3,5.9,13.3,13.3v0.8
				c0,7.4-5.9,13.3-13.3,13.3c-7.4,0-13.3-5.9-13.3-13.3v-0.8C485.2,331.5,491.1,325.6,498.5,325.6z"/>
			<g id="g5727" transform="matrix(0.56513581,0,0,0.58228033,380.14626,270.57807)">
			</g>
		</g>
		
			<sodipodi:namedview  bordercolor="#666666" borderopacity="1.0" id="base" inkscape:current-layer="layer1" inkscape:cx="276.63091" inkscape:cy="420.17292" inkscape:document-units="px" inkscape:guide-bbox="true" inkscape:pageopacity="0.0" inkscape:pageshadow="2" inkscape:snap-center="true" inkscape:snap-global="true" inkscape:snap-grids="true" inkscape:snap-midpoints="false" inkscape:snap-nodes="false" inkscape:snap-to-guides="false" inkscape:window-height="1056" inkscape:window-maximized="1" inkscape:window-width="1855" inkscape:window-x="65" inkscape:window-y="24" inkscape:zoom="0.66231949" pagecolor="#ffffff" showgrid="false" showguides="true">
			<sodipodi:guide  id="guide3980" orientation="0,744.09448" position="0,0"></sodipodi:guide>
			<sodipodi:guide  id="guide3982" orientation="-1052.3622,0" position="744.09448,0"></sodipodi:guide>
			<sodipodi:guide  id="guide3984" orientation="0,-744.09448" position="-1171.407,1146.4834"></sodipodi:guide>
			<sodipodi:guide  id="guide3986" orientation="1052.3622,0" position="0.75492266,781.34495"></sodipodi:guide>
		</sodipodi:namedview>
		<g id="layer1" inkscape:groupmode="layer" inkscape:label="Layer 1">
			<rect id="rect3903" x="39.5" y="13.6" class="st1" width="350.2" height="208.2"/>
			<g id="Layer_1" transform="matrix(1.813901,0,0,1.813901,336.92634,104.0327)">
			</g>
			<g id="g7121" transform="matrix(4.9853203,0,0,4.8385336,-1656.4286,-687.07658)">
				<g id="g7125" transform="matrix(0.56513581,0,0,0.58228033,380.14626,270.57807)">
				</g>
			</g>
			<g id="g7110-4" transform="matrix(3.5831693,0,0,3.4776672,-811.66995,-325.9825)">
			</g>
			
				<g id="g4259" transform="matrix(2.1313957,0,0,2.1313957,-437.37312,-789.43314)" inkscape:export-filename="/home/crepeia/aes/imgs/aes.png" inkscape:export-xdpi="300" inkscape:export-ydpi="300">
				<g id="g7010-8-7" transform="matrix(3.0186529,0,0,2.9297723,-841.88044,-195.62494)">
					<g id="g7014-2-6" transform="matrix(0.56513581,0,0,0.58228033,380.14626,270.57807)">
					</g>
				</g>
				<path id="path6999-0-0" inkscape:connector-curvature="0" class="st2" d="M355.1,595.5c-3.4,0-6.1,2.7-6.1,6.1s2.7,6.1,6.1,6.1
					c3.4,0,6.1-2.7,6.1-6.1S358.4,595.5,355.1,595.5z M377.6,604.4c-2.9,0.1-7.9,2.4-10.7,4c-2.5,1.5-7.7,4.1-11.8,3.9c0,0,0,0,0,0
					c-4.1,0.2-9.3-2.5-11.8-3.9c-2.8-1.6-7.8-3.9-10.7-4c-1,0-1.7,0.1-2,0.7c-1,2.6,10.7,4.8,14.9,12.1c4.6,7.5-2.8,36.1,4.3,36.1
					c6.5,0-2.4-19.5,5.3-27.6c7.7,8.1-1.2,27.6,5.3,27.6c7.1,0-0.2-28.6,4.3-36.1c4.2-7.3,15.9-9.6,14.9-12.1
					C379.3,604.5,378.6,604.3,377.6,604.4L377.6,604.4z M355.1,584.3c22.2,0,40.1,17.4,40.1,38.9v2.4c0,21.6-17.9,38.9-40.1,38.9
					c-22.2,0-40.1-17.4-40.1-38.9v-2.4C315,601.7,332.9,584.3,355.1,584.3z"/>
			</g>
			
				<g id="g3052" transform="translate(-8,2.620549)" inkscape:export-filename="/home/crepeia/aes/imgs/aes.png" inkscape:export-xdpi="300" inkscape:export-ydpi="300">
				<g id="text3215" transform="matrix(2.1553264,0,0,2.1553264,14.700594,-799.93404)">
					<path id="path4276" inkscape:connector-curvature="0" class="st3" d="M40.3,638.6l-2.1-9.5c-0.1-0.4-0.4-0.6-0.8-0.6h-8
						c-0.4,0-0.7,0.3-0.8,0.6l-2,8.8c-0.1,0.4-0.4,0.6-0.8,0.6h0c-0.5,0-0.9-0.5-0.8-1l6.8-30.5c0.1-0.4,0.4-0.6,0.8-0.6h1.4
						c0.4,0,0.7,0.3,0.8,0.6l6.8,30.5c0.1,0.5-0.3,1-0.8,1H40.3 M29.2,627h7.6c0.5,0,0.9-0.5,0.8-1l-3.3-14.8
						c-0.2-0.8-1.3-0.8-1.5,0L29.2,627 M28.7,601.2l8.4-2.6c0.4-0.1,0.9,0.1,1,0.5l0,0c0.1,0.4-0.1,0.9-0.5,1l-7.6,2.4
						c-0.4,0.1-0.9-0.1-1-0.5L28.7,601.2L28.7,601.2"/>
					<path id="path4278" inkscape:connector-curvature="0" class="st3" d="M45.5,638.6h-0.8c-0.4,0-0.8-0.4-0.8-0.8v-32.5
						c0-0.4,0.4-0.8,0.8-0.8l0,0c0.4,0,0.8,0.4,0.8,0.8V638.6L45.5,638.6"/>
					<path id="path4280" inkscape:connector-curvature="0" class="st3" d="M55.6,637.3c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1
						c0.4-0.4,0.8-1,1-1.5c0.2-0.4,0.3-0.8,0.3-1.2c0.1-0.4,0.4-0.7,0.8-0.7h0c0.5,0,0.8,0.4,0.8,0.9c-0.1,0.6-0.2,1.1-0.5,1.7
						c-0.3,0.8-0.8,1.4-1.3,2c-0.6,0.6-1.3,1-2,1.4c-0.8,0.3-1.6,0.5-2.5,0.5c-0.9,0-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4
						s-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5c0.3-0.8,0.8-1.5,1.4-2c0.6-0.6,1.2-1,2-1.3
						c0.8-0.3,1.6-0.5,2.5-0.5c0.9,0,1.7,0.2,2.5,0.5c0.8,0.3,1.5,0.8,2,1.3c0.6,0.6,1,1.3,1.3,2c0.2,0.5,0.4,1,0.5,1.6
						c0.1,0.5-0.3,0.9-0.8,0.9h0c-0.4,0-0.7-0.3-0.8-0.7c-0.1-0.4-0.2-0.8-0.3-1.2c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1
						c-0.6-0.3-1.2-0.4-1.9-0.4c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.7,0.9-1,1.5c-0.3,0.6-0.4,1.2-0.4,1.9
						v11.2c0,0.7,0.1,1.3,0.4,1.9c0.2,0.6,0.6,1,1,1.5c0,0,0.1,0.1,0.1,0.1c0.4,0.4,0.9,0.7,1.5,1C54.3,637.2,55,637.3,55.6,637.3"
						/>
					<path id="path4282" inkscape:connector-curvature="0" class="st3" d="M71.7,638.9c-0.9,0-1.7-0.2-2.5-0.5
						c-0.8-0.3-1.4-0.8-2-1.4s-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5c0.3-0.8,0.8-1.5,1.4-2
						c0.6-0.6,1.2-1,2-1.3c0.8-0.3,1.6-0.5,2.5-0.5c0.9,0,1.7,0.2,2.5,0.5c0.8,0.3,1.5,0.8,2,1.3s1,1.3,1.3,2
						c0.3,0.8,0.5,1.6,0.5,2.5v11.2c0,0.9-0.2,1.7-0.5,2.5c-0.3,0.8-0.8,1.4-1.3,2c-0.6,0.6-1.3,1-2,1.4
						C73.4,638.7,72.6,638.9,71.7,638.9 M71.7,616.6c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.7,0.9-1,1.5
						c-0.3,0.6-0.4,1.2-0.4,1.9v11.2c0,0.7,0.1,1.3,0.4,1.9c0.2,0.6,0.6,1,1,1.5c0,0,0.1,0.1,0.1,0.1c0.4,0.4,0.9,0.7,1.5,1
						c0.6,0.3,1.2,0.4,1.9,0.4c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1c0.4-0.4,0.8-1,1-1.5c0.3-0.6,0.4-1.2,0.4-1.9v-11.2
						c0-0.7-0.1-1.3-0.4-1.9c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1C73,616.7,72.3,616.6,71.7,616.6"/>
					<path id="path4284" inkscape:connector-curvature="0" class="st3" d="M87.7,638.9c-0.9,0-1.7-0.2-2.5-0.5
						c-0.8-0.3-1.4-0.8-2-1.4s-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5c0.3-0.8,0.8-1.5,1.4-2
						c0.6-0.6,1.2-1,2-1.3c0.8-0.3,1.6-0.5,2.5-0.5c0.9,0,1.7,0.2,2.5,0.5c0.8,0.3,1.5,0.8,2,1.3c0.6,0.6,1,1.3,1.3,2
						c0.3,0.8,0.5,1.6,0.5,2.5v11.2c0,0.9-0.2,1.7-0.5,2.5c-0.3,0.8-0.8,1.4-1.3,2c-0.6,0.6-1.3,1-2,1.4
						C89.4,638.7,88.6,638.9,87.7,638.9 M87.7,616.6c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.7,0.9-1,1.5
						c-0.3,0.6-0.4,1.2-0.4,1.9v11.2c0,0.7,0.1,1.3,0.4,1.9c0.2,0.6,0.6,1,1,1.5c0,0,0.1,0.1,0.1,0.1c0.4,0.4,0.9,0.7,1.5,1
						c0.6,0.3,1.2,0.4,1.9,0.4c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1c0.4-0.4,0.8-1,1-1.5c0.3-0.6,0.4-1.2,0.4-1.9v-11.2
						c0-0.7-0.1-1.3-0.4-1.9c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1C89,616.7,88.4,616.6,87.7,616.6"/>
					<path id="path4286" inkscape:connector-curvature="0" class="st3" d="M99,638.6h-0.8c-0.4,0-0.8-0.4-0.8-0.8v-32.5
						c0-0.4,0.4-0.8,0.8-0.8h0c0.4,0,0.8,0.4,0.8,0.8V638.6L99,638.6"/>
					<path id="path4288" inkscape:connector-curvature="0" class="st3" d="M147.9,691.7c-0.3,0.1-0.8,0.3-1.4,0.6
						c-0.7,0.3-1.4,0.5-2.2,0.8c-0.8,0.3-1.5,0.6-2.2,0.9c-0.7,0.3-1.3,0.5-1.7,0.6v4c0,0.7,0.1,1.3,0.4,1.9c0.3,0.6,0.6,1.1,1,1.5
						c0.4,0.4,1,0.7,1.5,1c0.6,0.3,1.2,0.4,1.9,0.4c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1c0.4-0.4,0.8-1,1-1.5
						c0.3-0.6,0.4-1.2,0.4-1.9h1.6c0,0.9-0.2,1.7-0.5,2.5c-0.3,0.8-0.8,1.4-1.3,2c-0.6,0.6-1.3,1-2,1.4c-0.8,0.3-1.6,0.5-2.5,0.5
						s-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4s-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5
						c0.3-0.8,0.8-1.5,1.4-2c0.6-0.6,1.2-1,2-1.3c0.8-0.3,1.6-0.5,2.5-0.5c0.9,0,1.7,0.2,2.5,0.5c0.8,0.3,1.5,0.8,2,1.3
						c0.6,0.6,1,1.3,1.3,2c0.3,0.8,0.5,1.6,0.5,2.4v0C151.5,689.4,150.3,690.8,147.9,691.7 M145.1,682.6c-0.7,0-1.3,0.1-1.9,0.4
						c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.7,0.9-1,1.5c-0.3,0.6-0.4,1.2-0.4,1.9v5.5c0.5-0.2,1.1-0.4,1.8-0.7
						c0.7-0.3,1.4-0.6,2.1-0.8c0.7-0.3,1.3-0.5,1.9-0.7c0.6-0.2,1-0.4,1.3-0.5c0.6-0.2,1.1-0.6,1.7-1c0.6-0.4,0.9-1.1,0.9-1.9
						c0-0.7-0.1-1.3-0.4-1.9c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1C146.4,682.7,145.8,682.6,145.1,682.6"/>
				</g>
				<g id="text3223" transform="matrix(2.1553264,0,0,2.1553264,14.700594,-799.93404)">
					<path id="path4291" inkscape:connector-curvature="0" class="st3" d="M199.1,623.6c0.8,0.6,1.6,1.3,2.3,2
						c0.8,0.7,1.5,1.4,2.1,2.2c0.6,0.8,1.1,1.7,1.5,2.7c0.4,1,0.6,2.1,0.6,3.4c0,1-0.2,1.9-0.6,2.7c-0.3,0.8-0.8,1.6-1.5,2.2
						c-0.6,0.6-1.3,1.1-2.1,1.5c-0.8,0.3-1.7,0.5-2.7,0.5c-1,0-1.9-0.2-2.7-0.5c-0.8-0.4-1.6-0.9-2.2-1.5c-0.6-0.6-1.1-1.4-1.5-2.2
						c-0.3-0.9-0.5-1.8-0.5-2.7h1.6c0,0.7,0.1,1.4,0.4,2.1c0.3,0.6,0.7,1.2,1.1,1.7s1,0.9,1.7,1.1c0.7,0.3,1.4,0.4,2.1,0.4
						c0.7,0,1.4-0.1,2-0.4c0.6-0.3,1.2-0.7,1.7-1.1s0.9-1,1.1-1.7c0.3-0.7,0.4-1.4,0.4-2.1c0-1.1-0.2-2-0.5-2.9
						c-0.3-0.9-0.8-1.6-1.3-2.3c-0.5-0.7-1.2-1.4-1.9-2c-0.7-0.6-1.4-1.3-2.2-1.9c-0.8-0.6-1.5-1.2-2.3-1.9c-0.7-0.7-1.4-1.4-2-2.1
						c-0.6-0.8-1-1.6-1.4-2.5c-0.3-0.9-0.5-2-0.5-3.2c0-1,0.2-1.8,0.5-2.7c0.4-0.9,0.9-1.6,1.5-2.2c0.6-0.6,1.4-1.1,2.2-1.5
						c0.9-0.4,1.8-0.6,2.7-0.6c1,0,1.8,0.2,2.7,0.6c0.8,0.3,1.5,0.8,2.1,1.5c0.6,0.6,1.1,1.3,1.5,2.2c0.4,0.8,0.6,1.7,0.6,2.7H204
						c0-0.7-0.1-1.4-0.4-2c-0.3-0.6-0.7-1.2-1.1-1.7c-0.5-0.5-1-0.9-1.7-1.1c-0.6-0.3-1.3-0.4-2-0.4c-0.7,0-1.4,0.1-2.1,0.4
						c-0.6,0.3-1.2,0.7-1.7,1.1c-0.5,0.5-0.9,1-1.1,1.7c-0.3,0.6-0.4,1.3-0.4,2c0,1,0.2,1.9,0.5,2.7c0.3,0.8,0.7,1.5,1.2,2.1
						c0.5,0.7,1.1,1.3,1.8,1.9C197.6,622.5,198.3,623.1,199.1,623.6"/>
					<path id="path4293" inkscape:connector-curvature="0" class="st3" d="M215.7,616.9c0.9,0,1.7,0.2,2.4,0.5
						c0.7,0.3,1.3,0.8,1.9,1.3c0.5,0.6,0.9,1.3,1.2,2c0.3,0.8,0.5,1.6,0.5,2.5v5.6v5.6v6.1h-1.6v-1.9c-0.6,0.7-1.3,1.2-2.1,1.6
						c-0.8,0.4-1.7,0.6-2.7,0.6c-0.9,0-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4c-0.6-0.6-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-1.3
						c0-2,1.2-3.4,3.6-4.3c0.3-0.1,0.8-0.3,1.4-0.6c0.7-0.3,1.4-0.5,2.2-0.8c0.8-0.3,1.6-0.6,2.3-0.9c0.7-0.3,1.3-0.5,1.7-0.7v-2.7
						c0-1.3-0.4-2.5-1.2-3.4c-0.8-1-1.9-1.4-3.2-1.4c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.8,0.9-1,1.5
						c-0.3,0.6-0.4,1.2-0.4,1.9h-1.6c0-0.9,0.2-1.7,0.5-2.5c0.3-0.8,0.8-1.5,1.4-2c0.6-0.6,1.2-1,2-1.3
						C213.9,617.1,214.8,616.9,215.7,616.9 M220.1,628.9v-1.2c-0.5,0.2-1.1,0.4-1.8,0.7c-0.7,0.3-1.4,0.5-2.1,0.8
						c-0.7,0.3-1.3,0.5-1.9,0.7c-0.6,0.2-1,0.4-1.2,0.5c-0.6,0.2-1.2,0.6-1.8,1c-0.6,0.4-0.9,1-0.9,1.8v1.3c0,0.7,0.1,1.3,0.4,1.9
						c0.3,0.6,0.6,1.1,1,1.5c0.4,0.4,1,0.7,1.5,1c0.6,0.3,1.2,0.4,1.9,0.4s1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1
						c0.4-0.4,0.8-1,1-1.5c0.3-0.6,0.4-1.2,0.4-1.9V628.9"/>
					<path id="path4295" inkscape:connector-curvature="0" class="st3" d="M237.7,617.2v11.7v5.6v6.1h-1.6v-1.9
						c-0.6,0.7-1.3,1.2-2.1,1.6c-0.8,0.4-1.7,0.6-2.7,0.6c-0.9,0-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4c-0.6-0.6-1-1.2-1.4-2
						c-0.3-0.8-0.5-1.6-0.5-2.5v-5.6v-11.7h1.6v11.7v5.6c0,0.7,0.1,1.3,0.4,1.9c0.3,0.6,0.6,1.1,1,1.5c0.4,0.4,1,0.7,1.5,1
						c0.6,0.3,1.2,0.4,1.9,0.4s1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1c0.4-0.4,0.8-1,1-1.5c0.3-0.6,0.4-1.2,0.4-1.9v-5.6v-11.7
						H237.7 M226.6,611.9l9.1-2.9l0.5,1.5l-9.1,2.9L226.6,611.9L226.6,611.9"/>
					<path id="path4297" inkscape:connector-curvature="0" class="st3" d="M253.8,606.5v16.8v11.2v6.1h-1.6v-1.9
						c-0.6,0.7-1.3,1.2-2.1,1.6c-0.8,0.4-1.7,0.6-2.7,0.6c-0.9,0-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4s-1-1.2-1.4-2
						c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5c0.3-0.8,0.8-1.5,1.4-2c0.6-0.6,1.2-1,2-1.3c0.8-0.3,1.6-0.5,2.5-0.5
						c1,0,1.8,0.2,2.7,0.6c0.8,0.4,1.5,0.9,2.1,1.6v-12.6L253.8,606.5 M247.4,639.3c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1
						c0.4-0.4,0.8-1,1-1.5c0.3-0.6,0.4-1.2,0.4-1.9v-11.2c0-0.7-0.1-1.3-0.4-1.9c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1
						c-0.6-0.3-1.2-0.4-1.9-0.4c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1c-0.4,0.4-0.7,0.9-1,1.5c-0.3,0.6-0.4,1.2-0.4,1.9
						v11.2c0,0.7,0.1,1.3,0.4,1.9c0.3,0.6,0.6,1.1,1,1.5c0.4,0.4,1,0.7,1.5,1C246.1,639.1,246.7,639.3,247.4,639.3"/>
					<path id="path4299" inkscape:connector-curvature="0" class="st3" d="M266.5,627.6c-0.3,0.1-0.8,0.3-1.4,0.6
						c-0.7,0.3-1.4,0.5-2.2,0.8c-0.8,0.3-1.5,0.6-2.2,0.9c-0.7,0.3-1.3,0.5-1.7,0.6v4c0,0.7,0.1,1.3,0.4,1.9c0.3,0.6,0.6,1.1,1,1.5
						c0.4,0.4,1,0.7,1.5,1c0.6,0.3,1.2,0.4,1.9,0.4c0.7,0,1.3-0.1,1.9-0.4c0.6-0.3,1.1-0.6,1.5-1c0.4-0.4,0.8-1,1-1.5
						c0.3-0.6,0.4-1.2,0.4-1.9h1.6c0,0.9-0.2,1.7-0.5,2.5c-0.3,0.8-0.8,1.4-1.3,2c-0.6,0.6-1.3,1-2,1.4c-0.8,0.3-1.6,0.5-2.5,0.5
						c-0.9,0-1.7-0.2-2.5-0.5c-0.8-0.3-1.4-0.8-2-1.4s-1-1.2-1.4-2c-0.3-0.8-0.5-1.6-0.5-2.5v-11.2c0-0.9,0.2-1.7,0.5-2.5
						c0.3-0.8,0.8-1.5,1.4-2c0.6-0.6,1.2-1,2-1.3c0.8-0.3,1.6-0.5,2.5-0.5c0.9,0,1.7,0.2,2.5,0.5c0.8,0.3,1.5,0.8,2,1.3s1,1.3,1.3,2
						c0.3,0.8,0.5,1.6,0.5,2.4v0C270.1,625.3,268.9,626.7,266.5,627.6 M263.7,618.5c-0.7,0-1.3,0.1-1.9,0.4c-0.6,0.3-1.1,0.6-1.5,1
						c-0.4,0.4-0.7,0.9-1,1.5c-0.3,0.6-0.4,1.2-0.4,1.9v5.5c0.5-0.2,1.1-0.4,1.8-0.7c0.7-0.3,1.4-0.6,2.1-0.8
						c0.7-0.3,1.3-0.5,1.9-0.7c0.6-0.2,1-0.4,1.3-0.5c0.6-0.2,1.1-0.6,1.7-1c0.6-0.4,0.9-1.1,0.9-1.9c0-0.7-0.1-1.3-0.4-1.9
						c-0.3-0.6-0.6-1.1-1-1.5c-0.4-0.4-0.9-0.8-1.5-1C265,618.6,264.4,618.5,263.7,618.5"/>
				</g>
			</g>
		</g>
		<script  id="JessyInk" ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS[&apos;sodipodi&apos;]=&apos;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&apos;;
NSS[&apos;cc&apos;]=&apos;http://web.resource.org/cc/&apos;;
NSS[&apos;svg&apos;]=&apos;http://www.w3.org/2000/svg&apos;;
NSS[&apos;dc&apos;]=&apos;http://purl.org/dc/elements/1.1/&apos;;
NSS[&apos;rdf&apos;]=&apos;http://www.w3.org/1999/02/22-rdf-syntax-ns#&apos;;
NSS[&apos;inkscape&apos;]=&apos;http://www.inkscape.org/namespaces/inkscape&apos;;
NSS[&apos;xlink&apos;]=&apos;http://www.w3.org/1999/xlink&apos;;
NSS[&apos;xml&apos;]=&apos;http://www.w3.org/XML/1998/namespace&apos;;
NSS[&apos;jessyink&apos;]=&apos;https://launchpad.net/jessyink&apos;;

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
	// Make sure we only execute this code once. Double execution can occur if the onload event handler is set
	// in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
	// not lead to any problems, but it takes more time.
	if (jessyInkInitialised)
		return;

	// Making the presentation scaleable.
	var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

	if (VIEWBOX)
	{
		WIDTH = ROOT_NODE.viewBox.animVal.width;
		HEIGHT = ROOT_NODE.viewBox.animVal.height;
	}
	else
	{
		HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
		WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
		ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
	}

	ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
	ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

	// Setting the background color.
	var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

	for (var counter = 0; counter &lt; namedViews.length; counter++)
	{
		if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
		{
			if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
			{
				BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
				var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

				if (ROOT_NODE.hasAttribute(&quot;style&quot;))
					newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

				ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
			}
		}
	}

	// Defining clip-path.
	var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

	if (defsNodes.length &gt; 0)
	{
		var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

		if (!existingClipPath)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
			var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);

			clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
			clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

			clipPath.appendChild(rectNode);
			defsNodes[0].appendChild(clipPath);
		}
	}

	// Making a list of the slide and finding the master slide.
	var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	var tempSlides = new Array();
	var existingJessyInkPresentationLayer = null;

	for (var counter = 0; counter &lt; nodes.length; counter++)
	{
		if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
		{
			if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
				masterSlide = nodes[counter];
			else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
				existingJessyInkPresentationLayer = nodes[counter];
			else
				tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
		}
		else if (nodes[counter].getAttributeNS(NSS[&apos;jessyink&apos;], &apos;element&apos;))
		{
			handleElement(nodes[counter]);
		}
	}

	// Hide master slide set default transitions.
	if (masterSlide)
	{
		masterSlide.style.display = &quot;none&quot;;

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

		if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
	}

	if (existingJessyInkPresentationLayer != null)
	{
		existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
	}

	// Set start slide.
	var hashObj = new LocationHash(window.location.hash);

	activeSlide = hashObj.slideNumber;
	activeEffect = hashObj.effectNumber;

	if (activeSlide &lt; 0)
		activeSlide = 0;
	else if (activeSlide &gt;= tempSlides.length)
		activeSlide = tempSlides.length - 1;

	var originalNode = document.getElementById(tempSlides[counter]);

	var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
	JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
	JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
	JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
	ROOT_NODE.appendChild(JessyInkPresentationLayer);

	// Gathering all the information about the transitions and effects of the slides, set the background
	// from the master slide and substitute the auto-texts.
	for (var counter = 0; counter &lt; tempSlides.length; counter++)
	{
		var originalNode = document.getElementById(tempSlides[counter]);
		originalNode.style.display = &quot;none&quot;;
		var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
		JessyInkPresentationLayer.appendChild(node);
		slides[counter] = new Object();
		slides[counter][&quot;original_element&quot;] = originalNode;
		slides[counter][&quot;element&quot;] = node;

		// Set build in transition.
		slides[counter][&quot;transitionIn&quot;] = new Object();

		var dict;

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
		else
			dict = defaultTransitionInDict;

		slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

		// Set build out transition.
		slides[counter][&quot;transitionOut&quot;] = new Object();

		if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
			dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
		else
			dict = defaultTransitionOutDict;

		slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
		slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

		for (key in dict)
			if (key != &quot;name&quot;)
				slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

		// Copy master slide content.
		if (masterSlide)
		{
			var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
			clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
			clonedNode.style.display = &quot;inherit&quot;;

			node.insertBefore(clonedNode, node.firstChild);
		}

		// Setting clip path.
		node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

		// Substitute auto texts.
		substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

		// Set effects.
		var tempEffects = new Array();
		var groups = new Object();

		for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
		{
			var propName = &quot;&quot;;
			var dir = 0;

			if (IOCounter == 0)
			{
				propName = &quot;effectIn&quot;;
				dir = 1;
			}
			else if (IOCounter == 1)
			{
				propName = &quot;effectOut&quot;;
				dir = -1;
			}

			var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

			for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
			{
				var element = document.getElementById(effects[effectCounter]);
				var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

				// Put every element that has an effect associated with it, into its own group.
				// Unless of course, we already put it into its own group.
				if (!(groups[element.id]))
				{
					var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

					element.parentNode.insertBefore(newGroup, element);
					newGroup.appendChild(element.parentNode.removeChild(element));
					groups[element.id] = newGroup;
				}

				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = dir;
				effectDict[&quot;element&quot;] = groups[element.id];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				if (!tempEffects[dict[&quot;order&quot;]])
					tempEffects[dict[&quot;order&quot;]] = new Array();

				tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
			}
		}

		// Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
		node.setAttribute(&quot;opacity&quot;,0);
		node.style.display = &quot;inherit&quot;;

		// Create a transform group.
		var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		// Add content to transform group.
		while (node.firstChild)
			transformGroup.appendChild(node.firstChild);

		// Transfer the transform attribute from the node to the transform group.
		if (node.getAttribute(&quot;transform&quot;))
		{
			transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
			node.removeAttribute(&quot;transform&quot;);
		}

		// Create a view group.
		var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

		viewGroup.appendChild(transformGroup);
		slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

		// Insert background.
		if (BACKGROUND_COLOR != null)
		{
			var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

			rectNode.setAttribute(&quot;x&quot;, 0);
			rectNode.setAttribute(&quot;y&quot;, 0);
			rectNode.setAttribute(&quot;width&quot;, WIDTH);
			rectNode.setAttribute(&quot;height&quot;, HEIGHT);
			rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
			rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

			slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
		}

		// Set views.
		var tempViews = new Array();
		var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
		var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

		// Set initial view even if there are no other views.
		slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
		slides[counter].initialView = matrixOld.toAttribute();

		for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
		{
			var element = document.getElementById(views[viewCounter]);
			var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

			if (dict[&quot;order&quot;] == 0)
			{
				matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
				slides[counter].initialView = matrixOld.toAttribute();
			}
			else
			{
				var effectDict = new Object();

				effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
				effectDict[&quot;dir&quot;] = 1;
				effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
				effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

				for (var option in dict)
				{
					if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
					{
						if (!effectDict[&quot;options&quot;])
							effectDict[&quot;options&quot;] = new Object();

						effectDict[&quot;options&quot;][option] = dict[option];
					}
				}

				effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

				tempViews[dict[&quot;order&quot;]] = effectDict;
			}

			// Remove element.
			element.parentNode.removeChild(element);
		}

		// Consolidate view array and append it to the effect array.
		if (tempViews.length &gt; 0)
		{
			for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
			{
				if (tempViews[viewCounter])
				{
					tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
					matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

					if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
						tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

					tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
				}
			}
		}

		// Set consolidated effect array.
		if (tempEffects.length &gt; 0)
		{
			slides[counter][&quot;effects&quot;] = new Array();

			for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
			{
				if (tempEffects[effectCounter])
					slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
			}
		}

		node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

		// Set visibility for initial state.
		if (counter == activeSlide)
		{
			node.style.display = &quot;inherit&quot;;
			node.setAttribute(&quot;opacity&quot;,1);
		}
		else
		{
			node.style.display = &quot;none&quot;;
			node.setAttribute(&quot;opacity&quot;,0);
		}
	}

	// Set key handler.
	var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
	{
		var elem = jessyInkObjects[counter];

		if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
		{
			if (elem.getCustomKeyBindings != undefined)
				keyCodeDictionary = elem.getCustomKeyBindings();

			if (elem.getCustomCharBindings != undefined)
				charCodeDictionary = elem.getCustomCharBindings();
		}
	}

	// Set mouse handler.
	var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

	for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
	{
		var elem = jessyInkMouseHandler[counter];

		if (elem.getMouseHandler != undefined)
		{
			var tempDict = elem.getMouseHandler();

			for (mode in tempDict)
			{
				if (!mouseHandlerDictionary[mode])
					mouseHandlerDictionary[mode] = new Object();

				for (handler in tempDict[mode])
					mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
			}
		}
	}

	// Check effect number.
	if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
	{
		activeEffect = 0;
	}
	else if (activeEffect &gt; slides[activeSlide].effects.length)
	{
		activeEffect = slides[activeSlide].effects.length;
	}

	createProgressBar(JessyInkPresentationLayer);
	hideProgressBar();
	setProgressBarValue(activeSlide);
	setTimeIndicatorValue(0);
	setInterval(&quot;updateTimer()&quot;, 1000);
	setSlideToState(activeSlide, activeEffect);
	jessyInkInitialised = true;
}

/** Function to subtitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
	var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

	for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
	{
		if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
			texts[textCounter].firstChild.nodeValue = slideNumber;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
			texts[textCounter].firstChild.nodeValue = numberOfSlides;
		else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
			texts[textCounter].firstChild.nodeValue = slideName;
	}
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *	This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
	var elems = new Array();

	if (node.getAttributeNS(namespace, name))
		elems.push(node.getAttribute(&quot;id&quot;));

	for (var counter = 0; counter &lt; node.childNodes.length; counter++)
	{
		if (node.childNodes[counter].nodeType == 1)
			elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
	}

	return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (dir == 1)
		{
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
			activeEffect += dir;
		}
		else if (dir == -1)
		{
			activeEffect += dir;
			effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
		}

		transCounter = 0;
		startTime = (new Date()).getTime();
		lastFrameTime = null;
		effect(dir);
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
	{
		processingEffect = true;

		if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
			activeEffect = slides[activeSlide][&quot;effects&quot;].length;
		else
			activeEffect = 0;

		if (dir == 1)
			setSlideToState(activeSlide, STATE_END);
		else
			setSlideToState(activeSlide, STATE_START);

		processingEffect = false;
	}
	else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
	{
		changeSlide(dir);
	}
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
	processingEffect = true;
	effectArray = new Array();

	effectArray[0] = new Object();
	if (dir == 1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = -1;
	}
	else if (dir == -1)
	{
		effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[0][&quot;dir&quot;] = 1;
	}
	effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	activeSlide += dir;
	setProgressBarValue(activeSlide);

	effectArray[1] = new Object();

	if (dir == 1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = 1;
	}
	else if (dir == -1)
	{
		effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
		effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
		effectArray[1][&quot;dir&quot;] = -1;
	}

	effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

	if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
		activeEffect = slides[activeSlide][&quot;effects&quot;].length;
	else
		activeEffect = 0;

	if (dir == -1)
		setSlideToState(activeSlide, STATE_END);
	else
		setSlideToState(activeSlide, STATE_START);

	transCounter = 0;
	startTime = (new Date()).getTime();
	lastFrameTime = null;
	effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
	var suspendHandle = ROOT_NODE.suspendRedraw(500);

	if (currentMode == SLIDE_MODE)
	{
		hideProgressBar();		
		INDEX_OFFSET = -1;
		indexSetPageSlide(activeSlide);
		currentMode = INDEX_MODE;
	}
	else if (currentMode == INDEX_MODE)
	{
		for (var counter = 0; counter &lt; slides.length; counter++)
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

			if (counter == activeSlide)
			{
				slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
				activeEffect = 0;
			}
			else
			{
				slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
				slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
			}
		}
		currentMode = SLIDE_MODE;
		setSlideToState(activeSlide, STATE_START);
		setProgressBarValue(activeSlide);

		if (progress_bar_visible)
		{
			showProgressBar();
		}
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
	var done = true;

	var suspendHandle = ROOT_NODE.suspendRedraw(200);

	for (var counter = 0; counter &lt; effectArray.length; counter++)
	{
		if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
			done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
			done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
			done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
		else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
			done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
	}

	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();

	if (!done)
	{
		var currentTime = (new Date()).getTime();
		var timeDiff = 1;

		transCounter = currentTime - startTime;

		if (lastFrameTime != null)
		{
			timeDiff = timeStep - (currentTime - lastFrameTime);

			if (timeDiff &lt;= 0)
				timeDiff = 1;
		}

		lastFrameTime = currentTime;

		window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
	}
	else
	{
		window.location.hash = (activeSlide + 1) + &apos;_&apos; + activeEffect;
		processingEffect = false;
	}
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
	var offsetX = 0;
	var offsetY = 0;

	if (offsetNumber &lt; 0)
		offsetNumber = 0;
	else if (offsetNumber &gt;= slides.length)
		offsetNumber = slides.length - 1;

	for (var counter = 0; counter &lt; slides.length; counter++)
	{
		if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
		{
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
			slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
		}
		else
		{
			offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
			offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

			slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
			slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
			slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
		}

		setSlideToState(counter, STATE_END);
	}

	//do we need to save the current offset?
	if (INDEX_OFFSET != offsetNumber)
		INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

	activeSlide = parseInt(nbr);

	setSlideToState(activeSlide, STATE_START);
	slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

	activeEffect = 0;
	setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

	activeSlide = parseInt(nbr);
	window.location.hash = (activeSlide + 1) + &apos;_0&apos;;

	slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view. 
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
	if (nbr &gt;= slides.length)
		nbr = slides.length - 1;
	else if (nbr &lt; 0)
		nbr = 0;

	//calculate the offset
	var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

	if (offset &lt; 0)
		offset = 0;

	//if different from kept offset, then record and change the page
	if (offset != INDEX_OFFSET)
	{
		INDEX_OFFSET = offset;
		displayIndex(INDEX_OFFSET);
	}

	//set the active slide
	indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
	if (!e)
		e = window.event;

	code = e.keyCode || e.charCode;

	if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
		return keyCodeDictionary[currentMode][code]();
	else
		document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
	document.onkeypress = null;

	if (!e)
		e = window.event;

	str = String.fromCharCode(e.keyCode || e.charCode);

	if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
		return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
	var charCodeDict = new Object();

	charCodeDict[SLIDE_MODE] = new Object();
	charCodeDict[INDEX_MODE] = new Object();
	charCodeDict[DRAWING_MODE] = new Object();

	charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
	charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
	charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
	charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
	charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
	charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

	charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
	charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
	charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
	charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
	charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
	charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
	charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
	charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
	charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
	charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
	charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
	charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
	charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
	charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
	charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
	charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
	charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

	charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
	charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
	charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

	return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
	var keyCodeDict = new Object();

	keyCodeDict[SLIDE_MODE] = new Object();
	keyCodeDict[INDEX_MODE] = new Object();
	keyCodeDict[DRAWING_MODE] = new Object();

	keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
	keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
	keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
	keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
	keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
	keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
	keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

	keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
	keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
	keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
	keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
	keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
	keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

	keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

	return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *	@param	evnt	event
 *	@param	action	type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
	if (!evnt)
		evnt = window.event;

	var retVal = true;

	if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
	{
		var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

		if (subRetVal != null &amp;&amp; subRetVal != undefined)
			retVal = subRetVal;
	}

	if (evnt.preventDefault &amp;&amp; !retVal)
		evnt.preventDefault();

	evnt.returnValue = retVal;

	return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
	window.addEventListener(&apos;DOMMouseScroll&apos;, function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
	var mouseHandlerDict = new Object();

	mouseHandlerDict[SLIDE_MODE] = new Object();
	mouseHandlerDict[INDEX_MODE] = new Object();
	mouseHandlerDict[DRAWING_MODE] = new Object();

	mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
	mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

	mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

	mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
	mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

	return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
	currentMode = DRAWING_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
	currentMode = SLIDE_MODE;

	var tempDict;

	if (ROOT_NODE.hasAttribute(&quot;style&quot;))
		tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
	else
		tempDict = new Object();

	tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
	ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &gt;= 3)
	{
		INDEX_COLUMNS -= 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
	if (INDEX_COLUMNS &lt; 7)
	{
		INDEX_COLUMNS += 1;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
	if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
	{
		INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
		INDEX_OFFSET = -1
			indexSetPageSlide(activeSlide);
	}
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
	path_width = path_width_default;
	set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
	path_width = width;
	set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
	path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
	var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

	if ((new_duration != null) &amp;&amp; (new_duration != &apos;&apos;))
	{
		timer_duration = new_duration;
	}

	updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
	addSlide(afterSlide);
	slideSetActiveSlide(afterSlide + 1);
	updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
	if (progress_bar_visible)
	{
		progress_bar_visible = false;
		hideProgressBar();
	}
	else
	{
		progress_bar_visible = true;
		showProgressBar();
	}
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
	timer_start = timer_elapsed;
	updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
	var outStr = str;

	while (outStr.length &lt; len)
	{
		outStr = &apos;0&apos; + outStr;
	}

	return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
	// Suspend redraw since we are going to mess with the slides.
	var suspendHandle = ROOT_NODE.suspendRedraw(2000);

	var tmpActiveSlide = activeSlide;
	var tmpActiveEffect = activeEffect;
	var exportedLayers = new Array();

	for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
	{
		var exportNode;

		setSlideToState(counterSlides, STATE_START);

		var maxEffect = 0;

		if (slides[counterSlides].effects)
		{
			maxEffect = slides[counterSlides].effects.length;
		}

		exportNode = slides[counterSlides].element.cloneNode(true);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
		exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

		exportedLayers.push(exportNode);

		if (slides[counterSlides][&quot;effects&quot;])
		{	
			for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}

				var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
				exportNode = slides[counterSlides].element.cloneNode(true);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
				exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
				exportNode.setAttribute(&quot;id&quot;, layerName);

				exportedLayers.push(exportNode);
			}
		}
	}

	activeSlide = tmpActiveSlide;
	activeEffect = tmpActiveEffect;
	setSlideToState(activeSlide, activeEffect);

	// Copy image.
	var newDoc = document.documentElement.cloneNode(true);

	// Delete viewbox form new imag and set width and height.
	newDoc.removeAttribute(&apos;viewbox&apos;);
	newDoc.setAttribute(&apos;width&apos;, WIDTH);
	newDoc.setAttribute(&apos;height&apos;, HEIGHT);

	// Delete all layers and script elements.
	var nodesToBeRemoved = new Array();

	for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
	{
		var child = newDoc.childNodes[childCounter];

		if (child.nodeType == 1)
		{
			if ((child.nodeName.toUpperCase() == &apos;G&apos;) || (child.nodeName.toUpperCase() == &apos;SCRIPT&apos;))
			{
				nodesToBeRemoved.push(child);
			}
		}
	}

	for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
	{
		var nd = nodesToBeRemoved[ndCounter];

		// Before removing the node, check whether it contains any definitions.
		var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

		for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
		{
			if (defs[defsCounter].id)
			{
				newDoc.appendChild(defs[defsCounter].cloneNode(true));
			}
		}

		// Remove node.
		nd.parentNode.removeChild(nd);
	}

	// Set current layer.
	if (exportedLayers[0])
	{
		var namedView;

		for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
		{
			if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute(&apos;id&apos;) == &apos;base&apos;))
			{
				namedView = newDoc.childNodes[nodeCounter];
			}
		}

		if (namedView)
		{
			namedView.setAttributeNS(NSS[&apos;inkscape&apos;], &apos;current-layer&apos;, exportedLayers[0].getAttributeNS(NSS[&apos;inkscape&apos;], &apos;label&apos;));
		}
	}

	// Add exported layers.
	while (exportedLayers.length &gt; 0)
	{
		var nd = exportedLayers.pop();

		nd.setAttribute(&quot;opacity&quot;,1);
		nd.style.display = &quot;inherit&quot;;

		newDoc.appendChild(nd);
	}

	// Serialise the new document.
	var serializer = new XMLSerializer();
	var strm = 
	{
		content : &quot;&quot;,
		close : function() {},  
		flush : function() {},  
		write : function(str, count) { this.content += str; }  
	};

	var xml = serializer.serializeToStream(newDoc, strm, &apos;UTF-8&apos;);

	window.location = &apos;data:application/svg+xml;base64;charset=utf-8,&apos; + window.btoa(strm.content);

	// Unsuspend redraw.
	ROOT_NODE.unsuspendRedraw(suspendHandle);
	ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
	mouse_presentation_path = null;
	mouse_original_path = null;

	if (history_presentation_elements.length &gt; 0)
	{
		var p = history_presentation_elements.pop();
		var parent = p.parentNode.removeChild(p);

		p = history_original_elements.pop();
		parent = p.parentNode.removeChild(p);
	}
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
	var value = 0;

	if (e.button)
		value = e.button;
	else if (e.which)
		value = e.which;

	if (value == 1)
	{
		history_counter++;

		var p = calcCoord(e);

		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
		mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
		mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
		slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
		history_original_elements.push(mouse_original_path);

		mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
		mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
		mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
		mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
		mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
		mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

		if (slides[activeSlide][&quot;viewGroup&quot;])
			slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
		else
			slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

		history_presentation_elements.push(mouse_presentation_path);

		return false;
	}

	return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
	if(!e)
		e = window.event;

	if (mouse_presentation_path != null)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_presentation_path = null;
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path = null;

		return false;
	}

	return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
	if(!e)
		e = window.event;

	var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

	if (mouse_presentation_path == null)
	{
		return true;
	}

	if (dist &gt;= mouse_min_dist_sqr)
	{
		var p = calcCoord(e);
		var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
		d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
		mouse_presentation_path.setAttribute(&quot;d&quot;, d);
		mouse_original_path.setAttribute(&quot;d&quot;, d);
		mouse_last_x = e.clientX;
		mouse_last_y = e.clientY;
	}

	return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		skipEffects(-1);
	else if (delta &lt; 0)
		skipEffects(1);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
	var delta = 0;

	if (!e)
		e = window.event;

	if (e.wheelDelta)
	{ // IE Opera
		delta = e.wheelDelta/120;
	}
	else if (e.detail)
	{ // MOZ
		delta = -e.detail/3;
	}

	if (delta &gt; 0)
		indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
	else if (delta &lt; 0)
		indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

	if (e.preventDefault)
		e.preventDefault();

	e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
	var svgPoint1 = document.documentElement.createSVGPoint();
	var svgPoint2 = document.documentElement.createSVGPoint();

	svgPoint1.x = 0.0;
	svgPoint1.y = 0.0;
	svgPoint2.x = 1.0;
	svgPoint2.y = 0.0;

	var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

	svgPoint1 = svgPoint1.matrixTransform(matrix);
	svgPoint2 = svgPoint2.matrixTransform(matrix);

	path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if (!options[&quot;matrixInitial&quot;])
	{
		var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

		if (tempString)
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
		else
			options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
	}

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
			set_path_paint_width();

			options[&quot;matrixInitial&quot;] = null;
			return true;
		}
		else
		{
			element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
		}
	}

	return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
	var length = 250;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;none&quot;;
			element.setAttribute(&quot;opacity&quot;, 0);
		}
		else if (fraction &gt;= 1)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, fraction);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1);
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
		}
	}
	return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
	if (dir == 1)
	{
		element.style.display = &quot;inherit&quot;;
		element.setAttribute(&quot;opacity&quot;,1);
	}
	else if (dir == -1)
	{
		element.style.display = &quot;none&quot;;
		element.setAttribute(&quot;opacity&quot;,0);
	}
	return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
	var length = 500;
	var fraction;

	if ((time == STATE_END) || (time == STATE_START))
		fraction = 1;
	else
	{
		if (options &amp;&amp; options[&quot;length&quot;])
			length = options[&quot;length&quot;];

		fraction = time / length;
	}

	if (dir == 1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
			element.style.display = &quot;none&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;inherit&quot;;
			return true;
		}
		else
		{
			element.style.display = &quot;inherit&quot;;
			var opacityFraction = fraction * 3;
			if (opacityFraction &gt; 1)
				opacityFraction = 1;
			element.setAttribute(&quot;opacity&quot;, opacityFraction);
			var offsetX = WIDTH * (1.0 - fraction) / 2.0;
			var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
			element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
		}
	}
	else if (dir == -1)
	{
		if (fraction &lt;= 0)
		{
			element.setAttribute(&quot;opacity&quot;, 1);
			element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
		else if (fraction &gt;= 1)
		{
			element.setAttribute(&quot;opacity&quot;, 0);
			element.removeAttribute(&quot;transform&quot;);
			element.style.display = &quot;none&quot;;
			return true;
		}
		else
		{
			element.setAttribute(&quot;opacity&quot;, 1 - fraction);
			element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
			element.style.display = &quot;inherit&quot;;
		}
	}
	return false;
}

/** Function to set a slide either to the start or the end state.
 *  
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
	slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

	if (slides[slide][&quot;effects&quot;])
	{	
		if (state == STATE_END)
		{
			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
		else if (state == STATE_START)
		{
			for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);	
				}
			}
		}
		else
		{
			setSlideToState(slide, STATE_START);

			for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
			{
				for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
				{
					var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
					if (effect[&quot;effect&quot;] == &quot;fade&quot;)
						fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
						appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
						pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
					else if (effect[&quot;effect&quot;] == &quot;view&quot;)
						view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);	
				}
			}
		}
	}

	window.location.hash = (activeSlide + 1) + &apos;_&apos; + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *	@param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
	var list = str.split(&quot;;&quot;);
	var obj = new Object();

	for (var counter = 0; counter &lt; list.length; counter++)
	{
		var subStr = list[counter];
		var subList = subStr.split(&quot;:&quot;);
		if (subList.length == 2)
		{
			obj[subList[0]] = subList[1];
		}	
	}

	return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
	var str = &quot;&quot;;

	for (var key in dict)
	{
		str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
	}

	return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *	@param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
	if (node.nodeType == 1)
	{
		if (node.getAttribute(&quot;id&quot;))
		{
			var id = node.getAttribute(&quot;id&quot;)
				replace[&quot;#&quot; + id] = id + suffix;
			node.setAttribute(&quot;id&quot;, id + suffix);
		}

		if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
			node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

		if (node.childNodes)
		{
			for (var counter = 0; counter &lt; node.childNodes.length; counter++)
				suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
		}
	}
}

/** Function to add a suffix to the ids of the node and all its children.
 *	
 *	@param node the node to change
 *	@param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
	var replace = new Object();

	suffixNoneIds_sub(node, suffix, replace);

	return node;
}

/** Function to build a progress bar.
 *	
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
	rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
	rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
	rect_progress_bar.setAttribute(&quot;x&quot;, 0);
	rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
	rect_progress_bar.setAttribute(&quot;width&quot;, 0);
	rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
	g.appendChild(rect_progress_bar);

	var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
	circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
	circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
	circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
	circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
	g.appendChild(circle_timer_indicator);

	parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *	
 */
function hideProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *	
 */
function showProgressBar()
{
	var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

	if (!progress_bar)
	{
		return;
	}

	progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *	
 *	@param value the current slide number
 *
 */
function setProgressBarValue(value)
{
	var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

	if (!rect_progress_bar)
	{
		return;
	}

	if (value &lt; 1)
	{
		// First slide, assumed to be the title of the presentation
		var x = 0;
		var w = 0.01 * HEIGHT;
	}
	else if (value &gt;= slides.length - 1)
	{
		// Last slide, assumed to be the end of the presentation
		var x = WIDTH - 0.01 * HEIGHT;
		var w = 0.01 * HEIGHT;
	}
	else
	{
		value -= 1;
		value /= (slides.length - 2);

		var x = WIDTH * value;
		var w = WIDTH / (slides.length - 2);
	}

	rect_progress_bar.setAttribute(&quot;x&quot;, x);
	rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *	
 *	@param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
	var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

	if (!circle_timer_indicator)
	{
		return;
	}

	if (value &lt; 0.0)
	{
		value = 0.0;
	}

	if (value &gt; 1.0)
	{
		value = 1.0;
	}

	var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
	circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *	
 */
function updateTimer()
{
	timer_elapsed += 1;
	setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system	
 */
function calcCoord(e)
{
	var svgPoint = document.documentElement.createSVGPoint();
	svgPoint.x = e.clientX + window.pageXOffset;
	svgPoint.y = e.clientY + window.pageYOffset;

	var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

	if (slides[activeSlide][&quot;viewGroup&quot;])
		matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

	svgPoint = svgPoint.matrixTransform(matrix.inverse());
	return svgPoint;
}

/** Add slide.
 *
 *	@param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
	number_of_added_slides++;

	var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	var new_slide = new Object();
	new_slide[&quot;element&quot;] = g;

	// Set build in transition.
	new_slide[&quot;transitionIn&quot;] = new Object();
	var dict = defaultTransitionInDict;
	new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

	// Set build out transition.
	new_slide[&quot;transitionOut&quot;] = new Object();
	dict = defaultTransitionOutDict;
	new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
	new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

	for (key in dict)
		if (key != &quot;name&quot;)
			new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

	// Copy master slide content.
	if (masterSlide)
	{
		var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
		clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
		clonedNode.style.display = &quot;inherit&quot;;

		g.appendChild(clonedNode);
	}

	// Substitute auto texts.
	substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

	g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

	// Create a transform group.
	var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	// Add content to transform group.
	while (g.firstChild)
		transformGroup.appendChild(g.firstChild);

	// Transfer the transform attribute from the node to the transform group.
	if (g.getAttribute(&quot;transform&quot;))
	{
		transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
		g.removeAttribute(&quot;transform&quot;);
	}

	// Create a view group.
	var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

	viewGroup.appendChild(transformGroup);
	new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

	// Insert background.
	if (BACKGROUND_COLOR != null)
	{
		var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

		rectNode.setAttribute(&quot;x&quot;, 0);
		rectNode.setAttribute(&quot;y&quot;, 0);
		rectNode.setAttribute(&quot;width&quot;, WIDTH);
		rectNode.setAttribute(&quot;height&quot;, HEIGHT);
		rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
		rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

		new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
	}

	// Set initial view even if there are no other views.
	var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

	new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
	new_slide.initialView = matrixOld.toAttribute();

	// Insert slide
	var node = slides[after_slide][&quot;element&quot;];
	var next_node = node.nextSibling;
	var parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
	g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
	g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
	g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
	g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

	new_slide[&quot;original_element&quot;] = g;

	node = slides[after_slide][&quot;original_element&quot;];
	next_node = node.nextSibling;
	parent_node = node.parentNode;

	if (next_node)
	{
		parent_node.insertBefore(g, next_node);
	}
	else
	{
		parent_node.appendChild(g);
	}

	before_new_slide = slides.slice(0, after_slide + 1);
	after_new_slide = slides.slice(after_slide + 1);
	slides = before_new_slide.concat(new_slide, after_new_slide);

	//resetting the counter attributes on the slides that follow the new slide...
	for (var counter = after_slide+2; counter &lt; slides.length; counter++)
	{
		slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
	}
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *	@param mPoints Point matrix.
 *	@return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
	mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

	return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *	@param rect an svg rectangle
 *	@return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
	rectWidth = rect.getBBox().width;
	rectHeight = rect.getBBox().height;
	rectX = rect.getBBox().x;
	rectY = rect.getBBox().y;
	rectXcorr = 0;
	rectYcorr = 0;

	scaleX = WIDTH / rectWidth;
	scaleY = HEIGHT / rectHeight;

	if (scaleX &gt; scaleY)
	{
		scaleX = scaleY;
		rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
		rectWidth = WIDTH / scaleX;
	}	
	else
	{
		scaleY = scaleX;
		rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
		rectHeight = HEIGHT / scaleY;
	}

	if (rect.transform.baseVal.numberOfItems &lt; 1)
	{
		mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
	}
	else
	{
		mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
	}

	newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
	newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

	return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *	@param	node	Element node.
 */
function handleElement(node)
{
	if (node.getAttributeNS(NSS[&apos;jessyink&apos;], &apos;element&apos;) == &apos;core.video&apos;)
	{
		var url;
		var width;
		var height;
		var x;
		var y;
		var transform;

		var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

		for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
		{
			if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
			{
				url = tspans[tspanCounter].firstChild.nodeValue;
			}
		}

		var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

		for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
		{
			if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
			{
				x = rects[rectCounter].getAttribute(&quot;x&quot;);
				y = rects[rectCounter].getAttribute(&quot;y&quot;);
				width = rects[rectCounter].getAttribute(&quot;width&quot;);
				height = rects[rectCounter].getAttribute(&quot;height&quot;);
				transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
			}
		}

		for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
		{
			if (node.childNodes[childCounter].nodeType == 1)
			{
				if (node.childNodes[childCounter].style)
				{
					node.childNodes[childCounter].style.display = &apos;none&apos;;
				}
				else
				{
					node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
				}
			}
		}

		var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
		foreignNode.setAttribute(&quot;x&quot;, x);
		foreignNode.setAttribute(&quot;y&quot;, y);
		foreignNode.setAttribute(&quot;width&quot;, width);
		foreignNode.setAttribute(&quot;height&quot;, height);
		foreignNode.setAttribute(&quot;transform&quot;, transform);

		var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
		videoNode.setAttribute(&quot;src&quot;, url);

		foreignNode.appendChild(videoNode);
		node.appendChild(foreignNode);
	}
}

/** Class processing the location hash.
 *
 *	@param str location hash
 */
function LocationHash(str)
{
	this.slideNumber = 0;
	this.effectNumber = 0;

	str = str.substr(1, str.length - 1);

	var parts = str.split(&apos;_&apos;);

	// Try to extract slide number.
	if (parts.length &gt;= 1)
	{
		try
		{
			var slideNumber = parseInt(parts[0]);

			if (!isNaN(slideNumber))
			{
				this.slideNumber = slideNumber - 1;
			}
		}
		catch (e)
		{
		}
	}
	
	// Try to extract effect number.
	if (parts.length &gt;= 2)
	{
		try
		{
			var effectNumber = parseInt(parts[1]);

			if (!isNaN(effectNumber))
			{
				this.effectNumber = effectNumber;
			}
		}
		catch (e)
		{
		}
	}
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
	this.e11 = 0; // a
	this.e12 = 0; // c
	this.e13 = 0; // e
	this.e21 = 0; // b
	this.e22 = 0; // d
	this.e23 = 0; // f
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 0;
}

/** Constructor function.
 *
 *	@param a element a (i.e. 1, 1) as described in the svg standard.
 *	@param b element b (i.e. 2, 1) as described in the svg standard.
 *	@param c element c (i.e. 1, 2) as described in the svg standard.
 *	@param d element d (i.e. 2, 2) as described in the svg standard.
 *	@param e element e (i.e. 1, 3) as described in the svg standard.
 *	@param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
	this.e11 = a;
	this.e12 = c;
	this.e13 = e;
	this.e21 = b;
	this.e22 = d;
	this.e23 = f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
	this.e11 = m.a;
	this.e12 = m.c;
	this.e13 = m.e;
	this.e21 = m.b;
	this.e22 = m.d;
	this.e23 = m.f;
	this.e31 = 0;
	this.e32 = 0;
	this.e33 = 1;

	return this;
}

/** Constructor function.
 *
 *	@param e11 element 1, 1 of the matrix.
 *	@param e12 element 1, 2 of the matrix.
 *	@param e13 element 1, 3 of the matrix.
 *	@param e21 element 2, 1 of the matrix.
 *	@param e22 element 2, 2 of the matrix.
 *	@param e23 element 2, 3 of the matrix.
 *	@param e31 element 3, 1 of the matrix.
 *	@param e32 element 3, 2 of the matrix.
 *	@param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
	this.e11 = e11;
	this.e12 = e12;
	this.e13 = e13;
	this.e21 = e21;
	this.e22 = e22;
	this.e23 = e23;
	this.e31 = e31;
	this.e32 = e32;
	this.e33 = e33;

	return this;
}

/** Constructor function.
 *
 *	@param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
	str = attrString.substr(7, attrString.length - 8);

	str = str.trim();

	strArray = str.split(&quot;,&quot;);

	// Opera does not use commas to separate the values of the matrix, only spaces.
	if (strArray.length != 6)
		strArray = str.split(&quot; &quot;);

	this.e11 = parseFloat(strArray[0]);
	this.e21 = parseFloat(strArray[1]);
	this.e31 = 0;
	this.e12 = parseFloat(strArray[2]);
	this.e22 = parseFloat(strArray[3]);
	this.e32 = 0;
	this.e13 = parseFloat(strArray[4]);
	this.e23 = parseFloat(strArray[5]);
	this.e33 = 1;

	return this;
}

/** Output function
 *
 *	@return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
	return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *	@return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
	out = new matrixSVG();

	det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

	out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
	out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
	out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
	out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
	out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
	out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
	out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
	out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
	out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

	return out;
}

/** Matrix multiplication.
 *
 *	@param op another svg matrix
 *	@return this * op
 */
matrixSVG.prototype.mult = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
	out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
	out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
	out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
	out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
	out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
	out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
	out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
	out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

	return out;
}

/** Matrix addition.
 *
 *	@param op another svg matrix
 *	@return this + op
 */
matrixSVG.prototype.add = function(op)
{
	out = new matrixSVG();

	out.e11 = this.e11 + op.e11;
	out.e12 = this.e12 + op.e12;
	out.e13 = this.e13 + op.e13;
	out.e21 = this.e21 + op.e21;
	out.e22 = this.e22 + op.e22;
	out.e23 = this.e23 + op.e23;
	out.e31 = this.e31 + op.e31;
	out.e32 = this.e32 + op.e32;
	out.e33 = this.e33 + op.e33;

	return out;
}

/** Matrix mixing.
 *
 *	@param op another svg matrix
 *	@parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *	@return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
	contribThis = 1.0 - contribOp;
	out = new matrixSVG();

	out.e11 = contribThis * this.e11 + contribOp * op.e11;
	out.e12 = contribThis * this.e12 + contribOp * op.e12;
	out.e13 = contribThis * this.e13 + contribOp * op.e13;
	out.e21 = contribThis * this.e21 + contribOp * op.e21;
	out.e22 = contribThis * this.e22 + contribOp * op.e22;
	out.e23 = contribThis * this.e23 + contribOp * op.e23;
	out.e31 = contribThis * this.e31 + contribOp * op.e31;
	out.e32 = contribThis * this.e32 + contribOp * op.e32;
	out.e33 = contribThis * this.e33 + contribOp * op.e33;

	return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
	return this.replace(/^\s+|\s+$/g, &apos;&apos;);
}
			</script>
	</g>
</switch>
<i:pgf  id="adobe_illustrator_pgf">
	<![CDATA[
	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
	]]>
	<![CDATA[
	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
QTW406O17afHbw8PgZ0+nLzvBXUKMhl1++NGaNVCCHwv0w+DTjG40+Mf/Y8TReYCO33aK3Zxp0i/
+HHVsuf5TEinN5f0dvtjP7BT+bg4k9l4KG5Dp+VPu1PoBUul0ZP0ZODa4BY9i2bx9rC+hDtlF9Zy
u25MD+nnpfIm6rTg0zRPPz7nmf2ni1QWul3VfAquN79qdDpcz3swzYCiX9Q73bph9tyCsKANLtcy
qFPK7hR6MaTSXtHEtTL0dJpf3p0R9U7XmYOiRxQW+vzxM+6UmytXDtydzmlavdGFXqBb2ourtqn2
TP7dz3jlr/CjvGV0Wv5Gecg701OfL3T1ptafRI91Iexezj/2yp7n9tObb8zHVdjTN7D/sqPQp7Be
ljar8yHPYQ7m8xXDmFJ/qJLnqSgzT+a4B++y92n3bebaWJVBz6XTvfJ96Nsyu3T2HP70rf644Hlq
U0yc3WTnb5uhbx/mu+ts+NPGycty6NNU9mSm2dgNeS7vzu+uXA70py8Ln4rn7ct8e/mH8ZSZKXuf
NvbPuybFAp5fVfOmlRnw9Hu2UcqEP72vllc9T50Ue84+SnOhb/8YnvZ3Q5++X7Fb30KfprIf77W1
x7DnMIZvy0Lo032WX7sOfdrsNs4Pwyk2n5nfu18Ke3t+e/OooYY+3WfXZ5hwim1m2LnFcsjbwi69
vbpk4lzOLXue5i++DdaNpxVqxfM0lb143lnaDHv+tjS3bprDQU/XbzdOnE/5wpnh8XFz3/KV4lKF
bi3cVSw7+Tnbwc6Z4ZrVnoQI14wdziGnt5Ip7is34PT+uEB/KPRbLVOonlXQn+8g6pQ5/BqSlvkj
XcIY/dXPtky5qc2wC6unRUMbMFmnhlib5RawD6k7O+CaOVZT6UjuLoAbeT3Czg72kl5WLGd+ttRe
bSyCbJvZRu5O0SWsnZ3mV9jXbyGdirOzl/3OnVPvO7vlb25DOwUV9IMJ7ZSuvRyfh3aayiKV2QzG
lb9pOTvlz+ccncrHW+eOTlvz87N2p4PZN/XM6pRDnOwi8Nrn3IeF607H1eniTWinQN5VNrRTmH3k
O9jdenBFvsNjSKc3D+GYztQGvEvvu7vFvkNop8h3eAvudCVDhXaKrPHa4UIortgiCe0U2SMXrjlV
FbN7/MmYBvDFKretDwLIxcfRRzcWTpz9fNy+PvHAGRESF6TwZvCdIS+2AOv7zbwjAmQv3OfcB6LO
mSOOtlYbaYZwmT/fMGSy/WKpPVsu2H/W+rnWheHqI6mEiLrWX1zpWy3mcBNryu7cDzyGNWXnrgqC
q76NeuZswaRLGBjA2nbW+FM46hkdYAPa7MAeDaC22tdBXPE/LPS2Sm9qNWv9OXN7FkYo68QCr6Je
dpwC7nl/3Rzy5Sl8nUd26WjJpI5u8xvi2EHA03kN5sVJQifl6X0hm8V/EEt+d7oAQUN6V/ZCh4Tt
5NECsO5RgV1Yp/fsiI0nNIiJzj6Mtg48RPeRHP0xhq775N+Qv+/FcCFDgB/+Ezt/5zMYxI6QBM7g
rIXfUih+yPC9jJ6/FOkM9oI4NIpYzqYcuOiNMUtbP2pxjZEw+3LRprthw4zNWTv3n/ErB7QYCeXB
NLqdZOVYax+IxW7dKvtjEsstehY9oieVhfE8brunlht3Nrbv9zQnAc0Bw7y4SDivC59g2j1uW+QN
GU1hu6D/MWinh1yDVuVNMeMR3HGrEocQA1G78axKazaSoMatX10cxRF652Bel5ZnIUOp5kmwUk+p
eWP2fcy+Db1c9VLZoNlKhBByBa8dY7DEn1vCPC/Ow/Cuq8HC5abQZ+pzC7sEhAklC9ZiVTqUMKW3
Xn7V5B2Lk3FAKJjGTFBTCBeyxtzrbsmv8uu10FWXyiZbd/WZ61HkTM4yhUumgP7c5a29BiM66mYM
kIy57YPoCTX+wHTaQWw/bwB+SAYa9pi/sZNv1qAcIwNchjuB41rbaQzCkNxAcZjhZclnhUVMSd4/
Ja2daB2XChc+Pp5+lwehBkG0xeiOWgM4WDN3w0jFFDi/AVTcQRTZdVuwHsVEbD21dtxy2q+WgHFT
DsUbMajh+n6Irjw5M0YTNSRD7+uDCjfprKkjmj/w8t3z57T5DZsiyuZ3zV83Szp/7h3eIGLtnH5M
zAy6RkaNnXenxVmgUDxNmXuv4zR2E+3EJKNYjF2XjGJP2tQo5pZoiSnWdzLas6T5HNfhWqAQMrRY
Eut4N4kreBYix7au3zIEBjZe58Grcrg+M7VVuXX9OUfqKBs8ZuzmBlBnnTk4TEQd32huUKxvQuqs
DSy1HO4qpEybItg03I0XCiQDQfsvpC5e+EBipADgQjAUt205xkAQxeKWvccnz4dozdddFLq+C2IV
7IsF+Yb6pqYd5D6zW2QfBg3KEc6GT3uI47cjIyTeDoywhpd2YAmSBDUcwsNaHq4sAn1QpuFB5g+H
D2k2zt8nFgAPwyzBgjN47CxSAOwlEQCB+Jn+PmC4MCbRfST3Wwpe/eLh2jBb/sce2hD8ToofjlqH
zmB1yGw/DHbI4xkhPnkqC9z/xk2NWMEL3Bu7ICJW2BIPZQZ9vQQucW5OeS+5l/i+d4kHOmn+6JI/
QgJcOzNpLGHfE5LFs+8eD7FT8bHvtt9DAgG6FosRFczBwsSoIRum/O0o1h+OCm+sM/sjt1r2YpUi
CXAAH3yykyCkc/K+T6uOEff52EcbwzdBZHFrsVjCxMX6PKLA9Od9tiWijkhAHYcocEUa3Kb0xgib
0q6oNfABSTAx3pQ+8JjSAeuFgHblb9no0XjUILZhghUht34pLcRzBIEaPEAUcyvCsVBbjEYtRbB0
D3zqLymfY07uH3g131gIZdwqLzTWFykA1i+zwpgCwKH3D3yqLpgw8bYs0Mat6MI4mcyWRZtVCzh/
w4EV/OZlBp/HR7juUMEA1SPlCEd01I319bl3C3JsbXd9jnqZUrwVxhW29BLIZLRoSDcpPJzqmhc0
b9FKj4DjcStuN5Jz7yQmaSdsBQa1YllKAe1MulOBW8G8oedbJtN8gY259gdDrQuinQ==
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	47JNiavSSFOrQlnArkqLydEk5qegLK2xcntw1V2SLC0c6wsdVHCeVvIhefeSJqhOjMjSSrZeehFV
qsZofLmx3hNCYKBrS25xtT2dGDOelz2CDcOYW9qig1tJ7n66KcakwoS6v34JM4Xw8uO25yybceJj
yQ+MC4yPbU9jy/px244sh51BRFYFSHoIrXWqeTBhJvJaPJxcJXSKSZJGAjZY0R12UzkGujZFH7le
GzMYHBDnRwV3EXZWokBAveaP8yc9ecgdU+E/fQkE77LmifROUt12Hb41SHJGhKsUMM5uC59dT6ZK
a4eglomskklxiFbfHXYB0djw6raok1EJrHHXoMKT9e2pi54/IzoKFH2fm1IpZ8CdN94zIYlLAeMv
vXI0pceUohqLvteYbFy4IhU1FnKz8RhIevYrJ6NYbC1PEorF7Fwmo1jsHccJkDzk70Mp5isXDnVm
k9+ol8pOUgUYZpyHZKiOWQXoGkNEDaBpjY9XBUhaAxgUTyavAgxhAV8NYNQN7GFNJL9Rz5sNlawK
kLQG0JepkqgKkJSeHl2ZsAowkEECagCjfeS4KsAEPvJYVYAb+mj8WAVeyufisd92KV8UJ8dUbSW4
lC/iJIopXsqHq9Kmcw1nxKV8zl2e33cpn/9+5N9xKR9hFG7CS/kc0Z7feCmfqcV+76V8keeNR9BJ
jLCd8Wjiz4Ya414/4rOhJrrXz6q1C7zVb5yzoYLu9YsOpYZXPSe71y8MtdzkeUr7hNkUMWdDkd/r
F111N4WzofC9ftOor5y0FsJdkzj+vX4eg91zq599i9kUArqht/olrOQaM1sxsJJrjHv9QlAzbvWb
5P5K571+Y8ctE93rF32rH8ntDCT3+kWzZmyGKuG9fgT1lVO418+kTnDFjJeTx73XL/pWvxB7LPG9
fomr0qZU7u681S86zk9+r9+EPEZ4rx/RfXwT17xH3+qX9D6+8VSe7z6+iVdg0K1+YTtWSe/1i05z
C743Ifm9ftHlKcZuQmh5Ck14r190UoFxkxE96b1+TlL6b/ULmxfHTg3RvX7OXvy3+kXEYSITrr33
+o1dlTa18k6kK6dW9xBxq1+StR91r1+y+/jGvdfP3Yq3emLc+/hiCtGJ7+NLdq9fWCuliD2+5Pf6
Rd/qp5+mNfm9fnH+y3Tu9SOvSpvaMvTd6kcgx4ju9RvbGk90r1/0rX5Tuo8vZvkQ38c30fJx3Mc3
0b1+ViuBx/z5KlPGvNcv2kuIPlGH/F6/aIc6+ITD5Pf6BeJs3eoX7r0mu9cv2sxJEdfhRt/rR3pq
02T3+tnliEFVuGPdx5c4mhV2H1/Se/2CWzHD0BPkXLnu9fOHs50JNY7Y+ET3+kUXw7t3E8a/1y86
rmXdyTXhvX6e8jGPr+XWYuPf6xfttjvmZaJ7/aLddseqnOhePw/FCDMhk97rF+9XTuNeP5Iqzsnv
9Yu+1Q/1Mo17/dYib/XTT5uf/F6/YFFgbrLg8/mncK9f9I6NTrHJ7/WzxhUYnBzHhgm61y96cyH8
dKBk9/qFrE/jVj+ifEuyqwYjCmJRFC7hWSmlAOVwG6UcTi5d9yVFhHbffCcq4t/C9zBdifeu2EVg
4aKLn3Sa2DGstdW+8zJP3WQzusq5tdgz1bMJQ5dOVNGi6LHLFz0caBo7eMuAWtnP5O+O5+jS9buk
g6B6qszc0doeRee6mVLzrs9z2tt+ba3zoIANc7mUK34sLmx9btG7r8ebs5+jLTFzX29x8Ol5Y05e
Hm3PH518ngmf7zd3kkDxTfmodk0dUFpGONzhn7fO3i/XW+dH4ve3C/VY+LzKqS9z3zcX+eqPmYuz
g/dyZ+U6le2p67nu55P0mdU2uuJx5vvx+sIcl9sRsy93e3uLo7fZO753r5bx1OLKzrXLi/OrDJV/
3Miwr59X+RVuYYOubR1s0bWX5j69I86fadqzktMG8ve9weyj2EhlB0Lj7tQqBbzIr5aK3ynuUJkx
y95+lLTBfQ9dNqfMBssQV3Xp8u3hk7LZ/NZHa8S4AhLnwqkVdI9gdmlz43A/iFiYHIDucF7TuLlM
JKZvufqCejp7dXuxNtfVSrV5ln8dpbKznVamhWpJ983i0Myo0OePUb7aURfXJGY2axcXWXpObcFv
pz23wd73LB9A7bTiKJnT48m6rnTcbwliLYgSa2I219nWHsuPW89H2mH1tvJxt1no0xt5Rfg42SgN
V/Y3SoPWck2ZfT/d/r51c5xXROW2eltTYfbxlZuVh73nNrR49Wl2oF+lmWPy7xIqa7x53Fg+zGgY
v82P3uFg8+D796f89tX1LvoEiJ92KFS+W9CjbGvCjYZ9KLo0zFFYjj0NdZlcEqgF8xOTw1FkoI7U
ha/SEq4ABtGz14evqwX8FfTZnQZfK5T5Wq1U22aPZGh0l85XC9lRLbe7t4cyuhfensyBHizaj5iC
MqxbD/LOB4f5pvWg6HzwKKnWg5K7l37l1XrEON7Z2fpElQbHS87fLnMNE/i44HzwyresBxS+6ZDZ
ndugkXKYg152izUOPWKM4/Z2LllEDiBRfahU2vUSQ5eAa1D5Y8Eg4Ole0Zg/ZATqgun0kMIgOCUe
vp7R7MOgwcCf1gDFlE6v9Wa59QvgXNQ3uzhHLRqTd7OH5wB6qTDLRqc3JxTuhduSOXlZfVx8qbyJ
tZOtjjwrO/wO6+pG40wVn3q374i9OSslajGovZS7xUvablG8XC1XNi/nl58rb9JBf/Nis/sdaQOF
3bpbeqw9Ld4dsIvN67Y5GxeczdhgJ/e3DMQbh2DzW9xfB9alPuDXM53xUSBkUf9Un7kq4k9A9PMl
/dPWLbeL1M0N+zBa2cOfuDnlYwgNvAoIpGisuvdLCkdIdhiYNxkfd1qEtjdz+qf6XGXVGM97nbVG
04AOLtfNB6+8uUBuBQuXBrd+WUP5eM/wQLwtwtov1Vfmy6/dhcvayjb/w1e0u3P9zfBj9T+Gm2Kp
0xUnLw7vSmiEiNs2l/RP2/f7eawrZynnuIevHP4NzK78tj0ePBrx9mO3U33JDi42Vtav+c2Daxq0
gfAgwCr4lsP8yc23s/PbzfdPxdb1VqzPttGBmE4FXf+UoxT0cD6TW/8oZYqb3EWmcHR9lpmryqeZ
fLP4LVP47O9miqUcSP5MflQ+Rap8LVN4a99lCk+tC3i0cIV+q2aWPmc1h3pfW+0hI6KEaDebM/wg
kKCGHDtRl/QFZ3EJZnG0MzJ4K6JVS+MmuPXv23XMpiiggnK8dnOoHPEDGYkoXLa7pHeFgltstXiX
x8LTkpFFbCRhCYpMsWszBgv/MXc7QaQGO6TCHu3jA/xgjc+hZHWKbuVyZWNi18oYjRyz/di6wwNG
0vIwX9SFKxojU3hdLVX3V3o0gNcoi38fYDG8d7Y6M90aU5zbe7Mk4yKeJjSTW8zO4Qxl4LezkUfz
fIStOlwvtgEY7tSKSLrRQNGzT/h6WKKFxgHSlcc6KZld8dBuW58hpvGYLXpMUrcNOu/RyE/DaI1c
2aJoFmtarIfBSjmuVdfzwv5mobexiC+03twVn49BX3+vKNtys4DVN5g0XbBhdjpX1/ebu8IdDWq7
/4YtAJetMLuApg6dV7j/YZw7UHty3IStC73ZfqWy9b7Qva9S0sJgWVW0983zUeZN+tw9O0xlt+v1
BWr7tjXzhg0wMLvkkW6PZnsPFY8XQd5p+fBso7yttrfeczlYldu7p21m43OztFnd+2gPatUOs2Us
Ob7aBiqfDZF1fKxbgmuj+UzynlNZXW8czFXvqzs7q++bF1Xu04NwNLqoxZLt8XiMIPv0hhI+B4HC
i888tgRLr9nBdr59+7Z5cfVdS9wzC4KQ2XNnEbj6jur5O1ulqJXvtafhA7OxvP9+RkBydNqJRfT1
5bX5sad7XB5beh349hkNacku6GdNGMdtHHWRICzqa5FenJNpelDtbp2cbjzUqoLwDBr5YvlHrrp3
J+5D37kZ0Bs1ylqLn06v5Wlpm2Cmg6iNLdix6Y30ywLF725+gJw650MRN2+TJ0Q9MeI6o3kivb+J
0XAllwf1e8XlAl192psiScXoJV0d1d++w+wjQbrxctFf3tYeGidCp/E4B49OwfHRhnNbz8fsOTg+
wlpNmTtrVR72Z3eXR69rhS2K167YhfWlHQI6oHmZ1mIPZz59HzlyDubmQLh+3pe5SvVp86LyeJ9A
vqLzaMaSMOOgC5ZSgHRL2nMcuqmsE2FgtGK3KIOLkO1WNW29/M3GehKcU9lorEGY9edCVxtp9x4e
G1PMxAl13epLpsWT63Bfhd10FIqH7qnsbzFaInksAakToQu+WDzCQYyWqGdj7Sec5MB1NSmPTWqt
sbBerOWFvWlnaNe9A4pfLFTPWOSpHWfyt7mNTL7D15D3to++LoAz9+MBnD0Knn6bWc4U5eJJZqF/
OQdyDLy/E+TdzWUKbO0cOYhr6E8LeYm7mUVNK2QKmecF5PZdOTwGvOevnq7mUfTMkOzb97VPyz1c
RqUDG5V2bR4kzMbVwvXnRm9Xu6k9FXZnN09eVw6BMPxc9eXb4AxHNQeZh4WqMQert7PYPuA2tUzV
jXN4z0gju/rerj9vv290P0vP0P3ZDak5UXrL9gqhnaJeIhD+Vn2Z788iid6A7ptPCTrtarYJ4ap7
Hc9wJOgZn6Q3tkQnVWWw9uMMx60F0kkOpTayxhPQezpajNx0SKREjVMCpmou+aUc1i9j2g/k6hv7
Ygkl7JQ9cXY473TNcAxrLGa3vaRklPd2H40z2MlT0SqZpcdO31pmOQ/JUQYRDgTVP0teh80VOBQz
i8e3ClIeG+jPFlITx/rXpYXZFaQ/DpHiOURK5AA9oJC6OUdfa6BfFleOy5nC1SP9O/SLLgBS2fEF
boS76hG3OEIyBXc1umecOUwg6q/UjauD1T1YgReZ7Wfx5I1Ysf7H9YtHt43VcwS6KELiQhhJmNNp
B2OQnRyHNYj1q7lqZFwgMY+xzaeljeX7t6cqdfasVV5Wu42JTSizMiWJfk2+uHDUmnx5jcltOo9N
tLAJuA1mP8nyGhPdVHZ8aTIJjyWRJqSLi1SOEYuUwMWFeWx8uUK4uIy8i5jlhTbocG6aR72bW9aY
dq9S+eH0SNncFcUN+LOytfV8PHuMv6ayyrY8YneEEXO+/X3r/HCjNFw/2NwVLqnqbe3qHL7StfJ8
r1quzrZEeszQX3Scf1phGWet6HTiFL8zzh9tVsXG+RN7qlPxkceyolPZRKiP6cTgPfHph1893aey
03Bc4zg+ND7ms6gn4XiQ/OShyLF7dsbHpuhK/N4YbIj3FhAfe1eWxoqPLWiZ4r5yrTsk4JpItqcC
/svUfJXN2tN7Z6m22an/8CzwVDZoieNP0E6+po2eDyUrz4Mai88XcqlspZ25WyQNRdrJi8VFrVLG
GQqg3urDaD2bygZqWmZBHVbepAeV0K75zBuphsLHj8HTdhnlQZSNEKhdNUC80NbPlg==
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	sygWzhjhEhnccSFCZ7mAJwSBDEIBOHu/cRdqI1uOhHkJZ0gP87gQEBalu1jYRe2qosZ5QgB4ToIm
uRDWzcE4UFGlCJoDRy5eLg1CO0W0L9QKGhhvfMSM0T1H3iBiURIVCF4reSL4FKZc/TfP4AVMRAGa
hqTyo6crQvuY+uzrDRjkJgbVyhLt/kSXEcGKRBKgNUD2IawkgAhUpJXOCrZwhNDFvLHE5+RwEFdG
OtZ7EZlG3JrPwf4J12migXPOZ1Cbgmmi0MFEOaMBDZwjJkMxeKyAKzIuQoUiJPrBwGsRsxGX1XiY
VAHypm5XPkLQcYo8EHGVwCegKScI1U3Uk4GQ9yxGdtk8qBSKEUIiQ+SWrO6XDwkqrZPztCBwv6B5
TRHTCF4qk3pBulrC+BDJMsM6agPpRWH/CpiepNAv5ihf5hfiepAKFJWtUEjBDzJhV+A2hgJtePGq
eBhzY+F6xolackSrpO7xTJiUI1lInvhw5a0Vk8hJjeQeoLK0YgjIXMHNjwREgScdV5tL4X6fi+gG
d7zQDwOVUDMRkDblfYOkimQnuYD4LoR7wWwYLbqEiMWlfWYTlwvDmkkkjlBFKvVskS86QsB8pZlE
thDUrsvcNSvNJCoKFinMsTwXa+e0ZpKkGwTFRepBNnZf6yZRPg9aw8I9Q62bRMQJvNJi/VIamKB1
k2COIlT38Bxs0rpJhI9EBfMoNk5q3STxcDFxBkpStjFb6yZhggbtVG8YbgcyohaxUAnMuWIaICg4
EYHSyNsX1YFxLrs7EZtkSMux6I67JzbpcvfVJoDS6dhkVJ8xXHk45XdFidlPMUwTAU1sei4hm/0q
uChrPSyM9XQtUCIBugrPfpxwdZBYPWalErv0SyD27XKGQWgECetIqsCKD1SwDOFz4HO9V/hkIG8Z
E8gMQf1ahiD2JWc7FcsQqHmJOrNZ4yTvMESOiujiD5qtIsad2Pg8zgQ1ksmYuUokm7mTlEg2i+gq
kWw201Ui2cyqpOKzWV5Xi2Szza4WyWK9JSWSxb67OiRbAnB1SC6Eq0Ny5RHsCXLuxlABKWJNm02X
IWDaVSgfipw1TKhGw89ChgJeCP6HjKUi23B5kCyJUCrivU9iJjhFyvmtEOIA0SmFxx3nSGAhjZ7Q
QOWQz1jmTOCZT+IekRDF5NPTiiZIPpEyXgbwa6IHAKkBmfzBTgXJD5mvGQKZ35FyiC2SGCceJZx0
Clw5J43ilJWwIiFdVcY0EhmRYV5EknuGyNh+kiHxT86sTIC8wzFhh4os4ATQyKiE+saZZoig+0YG
LppQoaLfsCswSSAhHkvZJBlykq4MP/ic4B/Za9hfiyHgbAwjI9akEk+hPBQSh6kM5bisCNwDRrIp
GjDw20dEmfJBstl8eFCRQI4ERMgDWFSElrMScfCNjxY+tjVk0QHDMKVFVCAth/X5iNpC4DGcrjOB
QUf2qhRVElAOHsbeCoL+D44zSUXgYG0L8CxoQcDqJYNrd5YgfjzVbH7Awj1StIZVJF9Kx4FSuHkt
bhCtAnOjigWrbIa0RXER6eWQ0AJ6geJdFUVvhU9pwSdCCVGloHRuutrX3OcsjswauPRCC2HQjiZp
o7pumQSUIBcjp0io6KNNubQ4mMJom4ShSP9soVKgopY2RqDDippnkOaKRKDmn1WWn1WWw1WWxeck
1x8jyXXYHyTQneS6a48DZ2vrv9SfDvJm29OQVwhP0QEb/DslA8SZ7EIIyveXy9Xm4GZ6OduJABjt
tu7H73HJ72+55Pe/hyXfP19elPcnq/KynI3vj8v1/dnF2Rp/GV0uzm6xG6ezuV727jvStP0XegG2
ElAmffPxpnx39yDfB/UA4fgE1PEM8lEvaRxCDX+v9Go+vilXuyDs2Wp5dXlBX3dC1Var3/jqPsOC
vWCXJc/HJ+V8p+XqFv9K97G5EIwy/anDpCIYHReDFvjNcjlXwz5alXSjp9/cPL0AaQNm/p4fexLl
RskATFqsgy9+LVdrmtiQAzDAh+PQ732X3i5mE/qy22b1NOrfs99wwf+nXK9vni5+Gb7m2XSHpQL4
I2HFB+5DtIVLuu89Wl7erGZn5xsv9P18H38W3vdjkl7X3vfLyfmqnC3K1Ts/CAkYRMe7XC3PVuML
j/56uipLb7083VyPV+UX3s3yypuMF96qnM7WerLebOONF9P7y5VHr8vs9EZ3RT9fLaZE6DfnpUd0
5GLtLU/5H9+9eOt9V9Kg47n36upkPpt4z2aTcrEuvTGNjl/W5+XUO6m6QqNvMZM3eibet0vqe4x9
3PfKGX1feRr1vKgaRve57y2r1b27O95gDStveYm27/5MM7/xwMLU7UcKtmM/mmVPvdmChzlfXtL6
zqlnWvH1bD73Tkrval2eXs33dS8E7/349PD7l28PvYcvfvJ+fPj69cMXhz99SfCb8yV9LX8tVW+z
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
	]]>
	<![CDATA[
	yi5tjKvWJ32QVjkIhbevXeq6uUSjy6v1ee/WVKxYF63YeY9bppd9745WkNzZipxK4NUUwx5oKCH7
HijTJlEQnis1otJvzhptfX0nWgjXcddbECPmmEbT2fpyzvrQvcVyUbo8oN2zwf3JOLVp6UZFvrBb
4UoS+eWbzepwiX+b427HZWfcj7uYl1ebYatp1LsfaTnVyLKsyYvafg3/qJ6SDszY2n5EYjZ4L7Ar
q/Ji+WupX+mtLbvmrU3rSlXqvsR0NOcvT/6u389nywn3+P0YhEBb3ef6RxzjuXXcpr1CdzbiYV6w
au5LE7I2JlSgylpgwjb73e7+qzav7o5dK/xaBKgN8fWDFrugn+2+/hxg70Cb6NrbV+lpbb7cFg+a
3gQyVffWR90HMukGj9SNZusd+Ib9hmf4KD2rl5T+UnViGmKffeBYWx7ejtd4x9FMAYBGM9Xxu+yX
/UDMFuflarap34iWNG7w7QMoQUUAvhvDq4q59vlcuSYt4MitNnx8Aq8l9uxq3jzm5dXlXBtM/nqf
n0lTDdYai91mbOafe1tfnRAJ2yh9N/10tVkeIFameV+38tzOpdzOeH+0W8q9tXva8rY3uiI16vrq
9HT2Hg2fTtfv7ho9TebUkiW3u5vVFfEVhFnHUCHpaViz6MYmA0MWrii4Nlcn20Y7gI/2bPsXm0nb
C+lv3m61aEHXLfRbdXJF02fbRY2Po96ODZake1HGqcC6KXMumNpH4b9E7oR7/wAuq5OX18N1cH3O
UrdsYssOPm2ZxfsP2O5CeWauhxyJuvowk9O5Y0R3P/lwAPHHB0pL3iErDZ/WEfVWrxB/78dIJpM7
oyTYygEbcDvU6+SWPw7uOSzxrsinmfRdsI/36wPRT/fxu8M/e16DEBBO3+ZrOllSz/R+OfgjyqbO
k1iRQH51pi/E56ktRO34OuG/pmstxuygpfrgzipVTV9HW9kuoyFfnNliXa4238CFt4TatOprnx+z
0elstd6ol1dWQFhEZVOZPjzD9FEPJyiK2UjCSuLV/N3dfxOVz+/+LOmMMWTDfoH18kzWixG3hnhI
AIf4rmiGXuFwJdl+zbPd84J9SfByZrj4cFwZ3oWNITa914yvsTuVwvmJZoq7NM4VLE9zPZTysGvj
y7Y/XeufX8E7tPl3m9ftvNwg/dCiA7f3nJugOKBVW252aV1rPg9s4VscF/+1x1XbSI+uaEdV4wfO
t3/YPzQCvTGj4NYzAhnumdJB95ycTSxrbDBMGK9oTCIWN0A/dYOcZ7aaVoeFp0ELNYSBGuZPX9X4
WglFxncbXTo3igdTS+iTkvRgR8YgtqBkIprEjOiRtvMjzUb1mKzh7axib1Y39SI4kofYKRI/9ZZ4
4/V6OZkhKlJFrsw2+/TiEzmcQc69XqhrO+oY4u1iThODPEz0bYV4pGuipvNVOZ7eeJfKu2lgb8oM
/O6uIhNH1W7Mpj932fjFM6v2mIjMd+jpdpoisdtqSi2VpPkEVmPuVxvegQP4r4I1JVRhCFPrWfXb
07O7gYrm8nBiK/Eymxe623FYate0OdIUpp9zldoR6dGNVlth24K0u/zOaTYkRTGg3axuL7ox5r67
q/toMcPKQtn6fbmaCqbGQYM0V6S98Jpx7u5R2q8d5IBB3Rypv9VnrP/ZiaLOi9aLhWrZLVbjSCGS
2s2fe9be3abT5Xh4F0fdn/S7g1Ga/RrmFdTmvNg/drbQ3uDKXfSXsmTv2xX8U1mFuUHwKJHYcsGu
tEzjT6CExMeT5Xv2lT0hIWk8n1whHHS6lbdeXo4ns83N3r7tdrLYTVSoIhDpTfDqbBnCG1DHT+D7
xyDbNPDD6bSSC7E7fcNfE3EtK21DW2yxT8yco6tcFGWe9qRYEXBaxQ3XU6qDoxttMStJMW8D0J17
oyax7NJ1o+2uDday1l0dCWKPM5CD5ZIQYrXaKh3WSAQ30A78waePgTp1P+bxmnu0TTFcd1Lrds3e
6u8ymjxltqJlT3CP3PGldAyt4lF/FL85o8d/GS+3rS1ND7dv6sPp1/x09XY6m8PoZ59jxy73YZjF
hVYD7nu9jXZVz/AFkzUAlXN3v/z/q4baVS7cs3y/6w5VjruXc0RCMfOtf3nzw3ccbfLnEahpNda7
uwEhWPX/jb936z1mKuhC0R3OY6DCTeidRWD8YuktVX4GZ296976HwtaLGm2WLRiHtFr9j/RMcRS0
HZ299GhbMEFDqG7/8JVeYiVQt74N0r4MEKN5gKNWx5II/RHE5wqfOm6acoxus3O7aHvaOHm5JNFX
JRU8XB5WZ8zGSXVLD5fPdZrGllw3uriagxXvRGj6V9XMRoLm7aJdeEM0vVw8Onyu2xIjib/t0r8g
jrodN113CKUfiKrdUoNkeOlW5PzGcqyrQ3NGaEmxfeRja0c13noGHn+Wg52N+m8lB8tD7qkL9IJo
2s//s4mOKLur2CZH+B8glhs/Ej/wmmWY6iVzdJiDVXfbpR062CVtMkQeZjzGnDsALkNKiOCYUSUa
VlpcQLhCQr0BYnyPeM8G8wN23708QeeVNqdpvf47UR+5E+Gm0FPDN6X+V+f1bD/mg7vni9hLPlx9
VmfnWzVc1cqH9jRY77Vrx0e7ALf0YzJor5pa/qFLbJk0t2k64Lo8MSxHAy6M69Wletgbttc7mbXc
Cd7WtGWv1zFedeFE93KPuj9Z5y2PuaN+VNRbLjhfAxFd9mvVDImRf+ZBK2dRxZkYWWbAnzQCPUJU
8cZ4/0VM0bR8Txj1sAGmIW3QL71/fNljSGdd7mw+29xwUrpKvlxvCD1dhKy9Ph+0p7gFIYfpaIPe
faz0v0HHc6VfPJP9HjgT1yl06zRsvVBnCAu2GB5J7Vx5+NTOVqOYvA+LtgvNq9vhnWuNuJOLLtgF
74HdhRPNZOILGg0QgCdX683y4q/lzTcqNnE9MPqt6v6R3R6XBvkwT2cLOztF9Z+UlKezv05qKUwD
yYB2mIeYWqi7R0cQ7UU9I1+QiHztbECDMdAMCkQPeohbY2R7Gh+Clu1+BuKmsQPd5yVqkfB4aAle
6m7LIwsXKfai1r3s8lT+Uc70dIQ+e17LvlbDZU41/TqpTbOCDxn+SPdXPcpNf/WXYS+ycxMenZeT
XypWSyUkMiMGq0AkHfzEgUze//2/2GbNQ7Reu591SNS6TaOMgxJzwRkztCOgNOzXXs9wTkhU35jb
+3Emxf9QZpdXOvfXN+PVoDCW4JwGMBq1vtEb2vr0A7JAG4FfJihS3T0lUjcZb5YVsG+CPMWl/nU8
pwf56hJsNNrwmMRjBb5vgfMgh8s3G66d0Bp430ja12okp5GDZy2D1BuGxFXf1pmWloif6Q6f8f6i
/vS8/32JrI/aoKotq9Y3FZ8HlzhorMwY/toYO1t7y4XYkFFcY/oOjVWDl6c6Yr9pr5N26WRV7UAq
1YOZZavHS7Ve1357pvvWyFZiLkVo3yuPTq192c4dbdaX40X3e4QODdGm/cNX2ve2eoha3/rzB3Cz
oxb4kNjzsd6lKuS8tTOCA7swRGM5G2F/+NZUNMAK8jSJz0eZrnl2HzRjs6tPOWnem8PZZi7FCOy6
xYR+JjU1KMSj5eLXcjErF5OylZdtCbMjuz1qQ9S0hCYNLjL0+fq8ZDPeTHtHsm0JZknlEzlGsq/N
DN4zKp1VQ2GCQyP/W3nBHjZrb43MvlOkjrvxLmZrkLS/cXaZCnQMGXB3StVk8W7+pilO7UQiNGl5
mOCfEhnZYpath1N/FWgGdrY7lWN9Z0XPebf3P5vYSF23sjFsycEwjBfmjrjgQDsF0g6ZS1qNG204
PqCaXIdDdrVJakWT5WKC/HG9ey8NI51HR7y7Sg+oBux/TyGjjzeTc4V7yCetWJj9xuhNuA7xnfN3
7yNN6+KsbJ47GZ3hQ07/lWocjay66bu7AW0GHdX1eDVd73sH+CfcXvjfavtsRK2mqbVIMNauLHTk
IxJ4srZyjjU/+D/2cefDUr9ZvGl/Nw2XqDnYur8DuUOlUPxzJzMr5BmuOSEHC5uptz85UoyZgbh/
QUft2boSgLGWe653bkfmk9ae9M50W/cfcTWOQlFM4Fx95HQROi+0smI9Hld+GaBG+OToCjoTSptL
0RjcJ7Z042mVC6LC91ZyBoVlFVp2IqZOB7EFL9WF1VpPYb7dXPovs8s6KgQ2LEULkOxV1Ta51MH2
imPmaAGVnIMIOIxdrBvFPzTN0Ov8p9AaTP4znRm0xBYtcl697dKyu1SHHd3SqRu31UMi322VVesk
+QOCfYf0xHn4BR1Pb175fz1qoO/iSbm5LsvFDnf5NrfXnaVxe7dcAeuh6WZrW3BHfk8KiQ58NDbW
7MvwOhJvTUeYuPDKNH22vV6GdVq36O238nRqhQsKyCuwAh9pB9ppGj7WBlgJEgatX1q+vSjX1cui
hhWAgWntK2pxR8PVfs6Egi2q6F3xNvj4pxZ8mlMLtpzarZB2t+UPu7Y7rn/wtQ36r62AKrfG3V0Z
iQOHk/ggLsJ+t3u5hz6ZZXe2wR76tuxCp4Cys3DSK5i4Qknna75Znp3Nm9ecPSRUaismUbAm8dtu
vcuqGa/3KZo4tSG43NDVGho6Zb3y2tm79ZfX5XQ1vn53N2lbIJrjs7w+mrJDHVe4w6ZSMXk1nFVv
yYqNr5xEXo1rxkO2veA/szBS45fSR4l6nFnEZW1VgxmMoqj9cvpknOtMZtUT3bDH1SeIlZOTcjRn
N8DvRZzVtpkN9orZbYmd/jLbqI1sWZWIxq2WO9Cd5jY7J3vxyAZiF9etImAfQBmrdrswPzWeSUWX
tuH9+fK6y/RqLLqjMMfVwiJfBp1rddY0obszKSvwbSR5dbVosjsMEaxmMH/MoPVdeny4Lbfi2whd
xvPhUPUptMeCqmEnih86FH8rlWsxMbsp+tvcj+3ZqEKD9k7HYjJuXuqfIM7jFeByMU+RnFnukbkw
EsX/gqPZ9zqGre7jvlFurgu8FRXRYdwbsDpd9K17fQrgv/EKL5eXPcujr/+N11bFunUsDp9/P6v7
tCSzglL+XNiBHj83/VztqvGvyuw9np2etmXKGsDi4dvDHHg1Hy+/VibXPizeuzWZujLmQcNG6oGN
nvsYs7q7r8SQSGvEQHwZ6x9sKaQ1J2cGOvW29lhaXhGu7lUvDXyw8aax//Xefn0AXSYV8dCl3N58
8obOhfWt97w7x3fozzZTZ6x0mE631w5bPcRKpFqfl2XHY748PaVNeVH5DuEf2q9Depx111rqarcV
3mr1+W8Gv9r8/pMsNRvzcVKUG1/lHOUGyNcPTPmktzdH5b0bi7BdEHK5g0ZU+cozd1Mp2quvX5vn
dM+q8fsX698HrhnlAwSwXr7/w3j+3eIBGoRq79yBvXP/bu4GPzyc5cGZfIOJz5Ey8nS+XK56u74v
dK3yQIg074OE3L17wX1jtHvwhmLAOb8ke/f0htyjRvrvPwFIStX5UaTa2+DMKNkWsg==
	]]>
	<![CDATA[
	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
	]]>
	<![CDATA[
	+ViD9LHRTwfpfCgCMorQDYZUetfgpw4afoprOPR+vmd+vml9/sltbX0efiMe9N4I+3Cc09M1R2m1
X1eX4mK2OMYvx+v/WP0PuGi3vD0fymJLd6i5ZYMukQprVWH+oiut50ErMPXonpxvNpdf3L8/ni4v
xuvRcnV2/+/jX8fKFHTA3R1wd/dvcwndkEapBl8534xlaWz39wGSFo30GH22cNS7f997+kRFCRvI
pMduN7sfhL5zGoakNy0349nc6v75y/9f6vmgAr8f9V00hv7aTinuJipyp6OaOtnInWREwlZZ4ffm
Vm8Nzrci8z8QR50s9v8sHOWBP+PorXH0g9PeDEbpD85q8xtdAbnYBT3RLBcqtwHRqbwjEMfBThKA
Xy0JJOj1cWDZ+c0P3zGoq27XfYS364P7qecxwvvnj1rlYuovNx1fQm4TiF+sNvWcL8b0IL/3ttV9
5/KIVUGsw6VeTCtKVUKN3UTT/pm05dMd59I+2mYT1XB1P8QE8g/tiJTWcTYbubUdt7VxzoiB8+6r
4mbEAwIB7rbP76A1xfeale37fs/4fmN8v3HaO98lk8HhufLS2aHicKvA8Pp8eTWfeicllx6mx2dY
xeHmqVHHqbps/93ung01XGPM6gGhIXXgCf1ljLdz7elYER1zgO8nJTGnC7aDnLbGsLrTXoTeuJUx
REUnjKdTdo0Yz2sgnb1pXkeetbr985f8dm/M7VWVVnTzqmia9sFQ3+aqpkllGFT4JsZhKL9JVdFV
bZ2Kb9uvBhAIn57qAy9MzJqQpyuVGkl4rnVvR3tqLk/hITKe7/V5DyAwXDkoDrzhcim+Li1Y072r
7+qarVdVgVW/E0lWmmOuSdEavt33VqXXrQajf1X+M3Rb9j2f/7/+S5fVWLtBMJKToNoqzKf8pcwP
OpjD3J3qiL0HVuEg8RhV9RyNqX/6k1cvVaGQpGqskcuBdZ1ImrnwzO97VmiHJFqv+uw+DFN365a3
dTwmKq/X7kKQXtfxjjbLVpNuJ4hqgz1zcl9vd5nbfXIvyuu+iRm99wYs74DjjhbtnS8rSsRd+WSn
czF7X6OusT37NZlj1+pBZyjIChoTDz6jojy5l/Pp1on9D0VD3poPQcOwtbYO6QkcHQJtPnN0H5mj
eycwYSqi6ZMzYZ9f/k/x8m+vj91DA2rfQc8uy/0xie7g0tBbZ2m7OH4CIvnxJtsQyN/Bq/zpzuDT
Pc/d2HmLG/C7RZPAOxiOKttfTRXr+fnd/Ce8m1VY7fCXc8hTsBuKbUOvQBDGdyA4O1yybTOR1AL9
7gJA58vl5Wdc/ifgMnv+3pIFTPzPLODvR/kz8NXsFgb31pPxXJVtkAKddyAJ/wzWQGIJq0ZO7K2o
l/2Ax/23Yio4H5Pagm8bRKz39S9e5DTR18Fs87W9/9V/bufB7pyN1Ymw402F9r/REBznzPafYOQb
XBFdr7BlJHSb/0TNVdzzLu2HXAb+x5wdZ+FwVM22ckCqhqd/0zD65uBDfRj8xUa334NqbtgdGkAo
gh0JhYjWv7UY8bFoxT9F+riFLLHjmQKF273JaPwBxzxQpLHdKMbar62ccfQ3ciUi4xrn2NOmSkSs
rZFGovYpqv5Xc1I6XWSVqY0DzdalDbSpksmpv80WBKbSTTYtGy6Q5vZOYKucxBZrldKC+7R4Km1j
XAvWxZ4DM1qNZkpzq4JtO/0bqiGE5FT/pQ/KpDZqC0y2rRdTh6aycmbyT0ph5Yz7yVNXdY/4z0pZ
ZeQk+j2nqfotJzowNdVvOcXB6ag+2ST/Yf8o5xkx12LRkErC25WKbCEcqAHX0Jmv21Tn4OAzKflI
pKQz0Rk9oAdBD6rxqf9Ok+D9NnP/0Fx4v82sPzwl3ieY945kqZf0dDFu/Ylmu4jWLqwPdFUtYIz+
mRv6+CTsMzf08YjTZ25oANkxFMJWLheUXjpnh0unJjP9eecYmVucPN6D0sTX6iuSnMeVCFmljWeZ
dtxVjhDzrIVhJVrbPbyrZGYtxI+dGoX0bV2WVtElQVC2aklR95LFQcVh0sfR+nI+Q8WML9sqCdYH
nvzd6y0itZU+Y5Q+MdQgdJrEqnT2aFkTsi8FsGd6AdygXsMXtlqlquD6rJkJcD3cwi7T0o90qyP/
55/VQPyvwJzNP9qoLKbbP/n77VCsZZrSyKVRjc1fk/ECuhKkafHGSNfXIFSXdU+7m7f6Vc7mv5ar
xkBWY9/AwQzUNDFPQE2rYNh0VtnQDNxcMwbs7XXg2i/lDUc4142dE0QH9x4w4D2PcIL+BPQR/fAz
fvmyUaRJR7aWyiO8uTo5OLXqrdAuXZ2ezt5XurPZdF0ZCJHojT33kSN0tlmrJJurctGcTuDQBm5U
t8bpnI8XZ6VLQ/SoUJ7VE6AJOYCr8nI+nhhnTvPTv04xX+P8VGdISvS0+mLp4DTAAgDHdCXe3VWJ
JNWH/apryVbPaQ078oS6SnmGtiIBZlOnhJ5zcYEgsypHptyB8O7oaR/t/RtwZTbFhade7ul1OczT
oiuFcKtRh5nCXGZrW1SqacJ7umZ7dc5CexV10pb389niF07bcr4qT3ljVJNqLcIGyA1/lnIbCiuU
Wu9L+ywPI2yMcORNrsQPVYta3Q3RhjLtkFHcyIqrnyUB7XsU9L2Vm36flKR5DwCguphyl91kg7es
h3Qo2mKQDeEJqAhXL/sxnBoZzfSSFlVxlM6DOblCXuSxUSXK2fT6gdXJ3aoNpxdyrA0cRpWpyrfF
3B0VGGoUW1L9HfNuuxt0Njyt01mbJzqzydZkPrs84MxPBHq1mr+7+29/pyncPF38wqzzI/r+ivPn
9Haj0iNxJs/jdn2p3kZVHdE9ber6woPJr82HthBisjE6Hr5+NG1Pw+mqc1oX49Uv5UrPykMSqS+8
1RmhWRDm+171B2L7VNYqd/7bB1Mb54Dt1Md7yyC7tQFbcEdFQehrpzjf3rhKzbXTiCqlOg/rB9Kw
Z2ZOKKdDAScms9VkXh6ramAkBSJz53IHxFDt2zst97g7foRJUsfvdePGsNEUgsiwu/c2ea/OwE+k
QxjYR4U+H9DHqm8aFi7IPTpB1zW5NFtXgZudZP68MmH30nmTXgsF+BwS3UWtmoTp39w8pQn2U82G
gf6jeR2qbwZnpN42WboZRPJkStztR3C+vN5174Sygv9ie6fdNeTtQ1Z2gyPgHKZ9zJxKcsosmM7m
rlwmVOHjGlzymGjXqUQvOmOqyHH1PLDOtve9V61dF6j4zlvfyvP6VafMeP++9+1stdY7s++N12ua
OYfTn1Sew5t5KdWlbXfDOabbaWrqX69VCo3m6XIm29Kuqtl+/cCs/gN7avf0n437Zg9HnIFzV65/
Bx2z3XE94mzV8pzS6Orn+w9q55hm3aEg85nz/YvCcnGeCuJ+f7+2JmcAy/T+NlzPddedZt/l5r0b
dJ8vy9UEZ3mmMBM9KJ92b730Tmn5J+XmuiwXOCqWAYOR33vfUf30aTWHLTd+O/vkXPutXEjr7ne9
2h9GAGgjOtXHOin1yM3sZPfzNW9kfz9BVz+8d+/ZxCDeNTbIql7uWTzObZi1yXsJ497qCq3oYMt7
a9XFNfDAqKQLnWlzpTuwSYUXNG0OvFZtXnYPfnc39WnFdm1taRWPlPYZlZOA5RNkPJwtaLZr0L4K
D9u/d+Wy5DxTKobD7cxqoxUA7dFmC+/ND9+BhS9bv3vrm/WmvOjaWDNJo3O/qlw7t0wqVTUfGbkQ
m7oDl0Q1/vaSfabdNkZqRLPNT2abero7JIN6wzv86PC5o5L51Kmfukdu7Xa9Cx3pmkYzYN3aDrCv
tP+6tYutKFrCk+yy7XHF8uN1V1F1ncPH9ndVldahjl9o7Z/9xDvRcmY1dTWihYGKOTxenh4TdDlV
MGsr//3vV5P04/lsU54sx6vpjum2P0TJRKejT69L7xjUIK0rQdBnRl+69pLSHyKTEzCQ48pGQj/N
16cLlcBCHlqlz2XXj6lKqHfYagmTmzRLs/ejPVQG4lHYIqb/OaRhbb8fYhMWbXQ1gcDXP8LBH4ML
tocBk1C2vAeNXa/7AJZXm8En8PJq03cEXdtPzbbvP/d9qwPQLX/jE7BnsfUIuJzkBck1RAjVtdIF
csw6ZAriTUPDBJaMOC5UWJtWhUtNY0KrB7cSG938414Scixl7G+Gs8NZtlU2/cCOVC3T7k6G16Gy
tWh1H11CE27N1cmaJGW4pYyv8BqV71uFLNf114f08RDf3t09c6m1/PYAru+rIdxZOO1Q9eWC89bS
fkKTuFfVlFT6keeMJQ90/tLnnBVSGUe9tlMQLgDnUGy/25WnkLKo/pdXJU1tlWRVIT2dzb70/uG8
LrgN/LR6Y68OOfEYaYwaX/U35nlu9zJXA4JdqaprVb4lwrBVubWz0Sk0KApbDIpgTsrSrhqt7Cko
1qtUHk/NBBrfJyTAM+yUJqA5Uz7ks778gB30w1pATwjQlt6NS3k2NNDNvmQ1JnAmSBcJap73A86/
7sM8LnMnZL6mxXKDszE7qD+6h/2U+VjOA4A1LabmwX3z8NFfv3v98u2Lx8go/PL1gJITUMpoin87
W19LvzAR6z7blrM+WCnssQu20hbZ9Yb72tQmMsce0tdKscsVo/1Nvfk9BZG6utJVcuyDErZTxpaR
kmRUuVllwnvB9vgOcIlyiEVMdSiezpxKkj7UrAhapEu0Au3wlhzCiO9m2eU6zVpvCk4h/2aTglP9
3dqEjhX1UJZ6Jj0p3upe28GHNPPOth1XUMmDbcHGqPfeerfakr0haCzocT/WzZSLEv3wZnYyny3O
DMCW3a0CbWrbubqBut+Oa98245nodLbvtRrvoK7eahl00O7jiMTbGMXKX2LXHqpq98O4rt9aYv8I
onnrsrm11hzhuw/X3eatuzcA4f8Vkf2Ehzxu6z40J07/M0Hykn3P4XTrrtSX7sbdLRUcEgdZE0AZ
1cl4w+T6uLKImcM4lA/i3GZTFTevnABrPnPt6YxGelD2aj5dzufael2r5Uaj+vmQHAxbq7kXuoFI
g13dNXLWgTot9eqnk3Oq2Q6QbQxQS54RvBm73NmXJ5zIvCXyKJ2dVvky8z/2Lllta2Q2r/+sNKsX
rJJde69E2KBS6T+URxLzpfOwz5WGeHloNHt3V49n6VT1r8PZCV9zgPX/KG5CMXjMYQQub6HX0gw2
uuDiGfoHaK9bhHW3g9A7z3aSzfmqxF1ZLcoVe5uOmeEeL87mnRpuAMD/n56/Btg9h3GzL1U6e3U3
rRFx96xuzEPCx8OlOiXFUVpHgp9+1EUW8HfIb998s3yPHRoxF26YeL9nHluCVdy3Afw3Ce69AfKT
BHJj9kLrXRk+BdzQ/lXRRGQMafL33Pfq5X1pgLRy9CiY743ZNy+Q7vBrlU7npy5yVA2roBxhQS3h
oLF43vd0k4Nmhio1kNO2OhyzoUFM6viZzletXrTV2txNnmC9LbrNQWt/OqZYI4XVtg==
	]]>
	<![CDATA[
	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
DFAuJ7krs6JKQvSTS6SIru55y5uPzh9SqXC+
	]]>
</i:pgf>
</svg>
